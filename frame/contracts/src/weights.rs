// This file is part of Substrate.

// Copyright (C) 2022 Parity Technologies (UK) Ltd.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// 	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for pallet_contracts
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-11-15, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `bm3`, CPU: `Intel(R) Core(TM) i7-7700K CPU @ 4.20GHz`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// /home/benchbot/cargo_target_dir/production/substrate
// benchmark
// pallet
// --steps=50
// --repeat=20
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --json-file=/var/lib/gitlab-runner/builds/zyw4fam_/0/parity/mirrors/substrate/.git/.artifacts/bench.json
// --pallet=pallet_contracts
// --chain=dev
// --header=./HEADER-APACHE2
// --output=./frame/contracts/src/weights.rs
// --template=./.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_contracts.
pub trait WeightInfo {
	fn on_process_deletion_queue_batch() -> Weight;
	fn on_initialize_per_trie_key(k: u32, ) -> Weight;
	fn on_initialize_per_queue_item(q: u32, ) -> Weight;
	fn reinstrument(c: u32, ) -> Weight;
	fn call_with_code_per_byte(c: u32, ) -> Weight;
	fn instantiate_with_code(c: u32, s: u32, ) -> Weight;
	fn instantiate(s: u32, ) -> Weight;
	fn call() -> Weight;
	fn upload_code(c: u32, ) -> Weight;
	fn remove_code() -> Weight;
	fn set_code() -> Weight;
	fn seal_caller(r: u32, ) -> Weight;
	fn seal_is_contract(r: u32, ) -> Weight;
	fn seal_code_hash(r: u32, ) -> Weight;
	fn seal_own_code_hash(r: u32, ) -> Weight;
	fn seal_caller_is_origin(r: u32, ) -> Weight;
	fn seal_address(r: u32, ) -> Weight;
	fn seal_gas_left(r: u32, ) -> Weight;
	fn seal_balance(r: u32, ) -> Weight;
	fn seal_value_transferred(r: u32, ) -> Weight;
	fn seal_minimum_balance(r: u32, ) -> Weight;
	fn seal_block_number(r: u32, ) -> Weight;
	fn seal_now(r: u32, ) -> Weight;
	fn seal_weight_to_fee(r: u32, ) -> Weight;
	fn seal_gas(r: u32, ) -> Weight;
	fn seal_input(r: u32, ) -> Weight;
	fn seal_input_per_kb(n: u32, ) -> Weight;
	fn seal_return(r: u32, ) -> Weight;
	fn seal_return_per_kb(n: u32, ) -> Weight;
	fn seal_terminate(r: u32, ) -> Weight;
	fn seal_random(r: u32, ) -> Weight;
	fn seal_deposit_event(r: u32, ) -> Weight;
	fn seal_deposit_event_per_topic_and_kb(t: u32, n: u32, ) -> Weight;
	fn seal_debug_message(r: u32, ) -> Weight;
	fn seal_set_storage(r: u32, ) -> Weight;
	fn seal_set_storage_per_new_kb(n: u32, ) -> Weight;
	fn seal_set_storage_per_old_kb(n: u32, ) -> Weight;
	fn seal_clear_storage(r: u32, ) -> Weight;
	fn seal_clear_storage_per_kb(n: u32, ) -> Weight;
	fn seal_get_storage(r: u32, ) -> Weight;
	fn seal_get_storage_per_kb(n: u32, ) -> Weight;
	fn seal_contains_storage(r: u32, ) -> Weight;
	fn seal_contains_storage_per_kb(n: u32, ) -> Weight;
	fn seal_take_storage(r: u32, ) -> Weight;
	fn seal_take_storage_per_kb(n: u32, ) -> Weight;
	fn seal_transfer(r: u32, ) -> Weight;
	fn seal_call(r: u32, ) -> Weight;
	fn seal_delegate_call(r: u32, ) -> Weight;
	fn seal_call_per_transfer_clone_kb(t: u32, c: u32, ) -> Weight;
	fn seal_instantiate(r: u32, ) -> Weight;
	fn seal_instantiate_per_transfer_salt_kb(t: u32, s: u32, ) -> Weight;
	fn seal_hash_sha2_256(r: u32, ) -> Weight;
	fn seal_hash_sha2_256_per_kb(n: u32, ) -> Weight;
	fn seal_hash_keccak_256(r: u32, ) -> Weight;
	fn seal_hash_keccak_256_per_kb(n: u32, ) -> Weight;
	fn seal_hash_blake2_256(r: u32, ) -> Weight;
	fn seal_hash_blake2_256_per_kb(n: u32, ) -> Weight;
	fn seal_hash_blake2_128(r: u32, ) -> Weight;
	fn seal_hash_blake2_128_per_kb(n: u32, ) -> Weight;
	fn seal_ecdsa_recover(r: u32, ) -> Weight;
	fn seal_ecdsa_to_eth_address(r: u32, ) -> Weight;
	fn seal_set_code_hash(r: u32, ) -> Weight;
	fn seal_reentrance_count(r: u32, ) -> Weight;
	fn seal_account_reentrance_count(r: u32, ) -> Weight;
	fn instr_i64const(r: u32, ) -> Weight;
	fn instr_i64load(r: u32, ) -> Weight;
	fn instr_i64store(r: u32, ) -> Weight;
	fn instr_select(r: u32, ) -> Weight;
	fn instr_if(r: u32, ) -> Weight;
	fn instr_br(r: u32, ) -> Weight;
	fn instr_br_if(r: u32, ) -> Weight;
	fn instr_br_table(r: u32, ) -> Weight;
	fn instr_br_table_per_entry(e: u32, ) -> Weight;
	fn instr_call(r: u32, ) -> Weight;
	fn instr_call_indirect(r: u32, ) -> Weight;
	fn instr_call_indirect_per_param(p: u32, ) -> Weight;
	fn instr_local_get(r: u32, ) -> Weight;
	fn instr_local_set(r: u32, ) -> Weight;
	fn instr_local_tee(r: u32, ) -> Weight;
	fn instr_global_get(r: u32, ) -> Weight;
	fn instr_global_set(r: u32, ) -> Weight;
	fn instr_memory_current(r: u32, ) -> Weight;
	fn instr_memory_grow(r: u32, ) -> Weight;
	fn instr_i64clz(r: u32, ) -> Weight;
	fn instr_i64ctz(r: u32, ) -> Weight;
	fn instr_i64popcnt(r: u32, ) -> Weight;
	fn instr_i64eqz(r: u32, ) -> Weight;
	fn instr_i64extendsi32(r: u32, ) -> Weight;
	fn instr_i64extendui32(r: u32, ) -> Weight;
	fn instr_i32wrapi64(r: u32, ) -> Weight;
	fn instr_i64eq(r: u32, ) -> Weight;
	fn instr_i64ne(r: u32, ) -> Weight;
	fn instr_i64lts(r: u32, ) -> Weight;
	fn instr_i64ltu(r: u32, ) -> Weight;
	fn instr_i64gts(r: u32, ) -> Weight;
	fn instr_i64gtu(r: u32, ) -> Weight;
	fn instr_i64les(r: u32, ) -> Weight;
	fn instr_i64leu(r: u32, ) -> Weight;
	fn instr_i64ges(r: u32, ) -> Weight;
	fn instr_i64geu(r: u32, ) -> Weight;
	fn instr_i64add(r: u32, ) -> Weight;
	fn instr_i64sub(r: u32, ) -> Weight;
	fn instr_i64mul(r: u32, ) -> Weight;
	fn instr_i64divs(r: u32, ) -> Weight;
	fn instr_i64divu(r: u32, ) -> Weight;
	fn instr_i64rems(r: u32, ) -> Weight;
	fn instr_i64remu(r: u32, ) -> Weight;
	fn instr_i64and(r: u32, ) -> Weight;
	fn instr_i64or(r: u32, ) -> Weight;
	fn instr_i64xor(r: u32, ) -> Weight;
	fn instr_i64shl(r: u32, ) -> Weight;
	fn instr_i64shrs(r: u32, ) -> Weight;
	fn instr_i64shru(r: u32, ) -> Weight;
	fn instr_i64rotl(r: u32, ) -> Weight;
	fn instr_i64rotr(r: u32, ) -> Weight;
}

/// Weights for pallet_contracts using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	// Storage: Contracts DeletionQueue (r:1 w:0)
	fn on_process_deletion_queue_batch() -> Weight {
		// Minimum execution time: 3_092 nanoseconds.
		Weight::from_ref_time(3_273_000 as u64)
			.saturating_add(T::DbWeight::get().reads(1 as u64))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	/// The range of component `k` is `[0, 1024]`.
	fn on_initialize_per_trie_key(k: u32, ) -> Weight {
		// Minimum execution time: 15_553 nanoseconds.
		Weight::from_ref_time(17_898_219 as u64)
			// Standard Error: 612
			.saturating_add(Weight::from_ref_time(959_535 as u64).saturating_mul(k as u64))
			.saturating_add(T::DbWeight::get().reads(1 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
			.saturating_add(T::DbWeight::get().writes((1 as u64).saturating_mul(k as u64)))
	}
	// Storage: Contracts DeletionQueue (r:1 w:0)
	/// The range of component `q` is `[0, 128]`.
	fn on_initialize_per_queue_item(q: u32, ) -> Weight {
		// Minimum execution time: 3_051 nanoseconds.
		Weight::from_ref_time(16_045_885 as u64)
			// Standard Error: 3_894
			.saturating_add(Weight::from_ref_time(1_251_095 as u64).saturating_mul(q as u64))
			.saturating_add(T::DbWeight::get().reads(1 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: Contracts PristineCode (r:1 w:0)
	// Storage: Contracts CodeStorage (r:0 w:1)
	/// The range of component `c` is `[0, 64226]`.
	fn reinstrument(c: u32, ) -> Weight {
		// Minimum execution time: 29_767 nanoseconds.
		Weight::from_ref_time(24_442_384 as u64)
			// Standard Error: 41
			.saturating_add(Weight::from_ref_time(47_060 as u64).saturating_mul(c as u64))
			.saturating_add(T::DbWeight::get().reads(1 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System Account (r:1 w:1)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `c` is `[0, 131072]`.
	fn call_with_code_per_byte(c: u32, ) -> Weight {
		// Minimum execution time: 307_279 nanoseconds.
		Weight::from_ref_time(317_807_474 as u64)
			// Standard Error: 17
			.saturating_add(Weight::from_ref_time(30_874 as u64).saturating_mul(c as u64))
			.saturating_add(T::DbWeight::get().reads(6 as u64))
			.saturating_add(T::DbWeight::get().writes(4 as u64))
	}
	// Storage: Contracts CodeStorage (r:1 w:1)
	// Storage: Contracts Nonce (r:1 w:1)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System Account (r:1 w:1)
	// Storage: System EventTopics (r:3 w:3)
	// Storage: Contracts PristineCode (r:0 w:1)
	// Storage: Contracts OwnerInfoOf (r:0 w:1)
	/// The range of component `c` is `[0, 64226]`.
	/// The range of component `s` is `[0, 1048576]`.
	fn instantiate_with_code(c: u32, s: u32, ) -> Weight {
		// Minimum execution time: 2_173_376 nanoseconds.
		Weight::from_ref_time(333_991_198 as u64)
			// Standard Error: 47
			.saturating_add(Weight::from_ref_time(90_283 as u64).saturating_mul(c as u64))
			// Standard Error: 2
			.saturating_add(Weight::from_ref_time(1_782 as u64).saturating_mul(s as u64))
			.saturating_add(T::DbWeight::get().reads(8 as u64))
			.saturating_add(T::DbWeight::get().writes(9 as u64))
	}
	// Storage: Contracts CodeStorage (r:1 w:1)
	// Storage: Contracts Nonce (r:1 w:1)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System Account (r:1 w:1)
	// Storage: Contracts OwnerInfoOf (r:1 w:1)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `s` is `[0, 1048576]`.
	fn instantiate(s: u32, ) -> Weight {
		// Minimum execution time: 187_549 nanoseconds.
		Weight::from_ref_time(176_268_968 as u64)
			// Standard Error: 1
			.saturating_add(Weight::from_ref_time(1_525 as u64).saturating_mul(s as u64))
			.saturating_add(T::DbWeight::get().reads(8 as u64))
			.saturating_add(T::DbWeight::get().writes(7 as u64))
	}
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System Account (r:1 w:1)
	// Storage: System EventTopics (r:2 w:2)
	fn call() -> Weight {
		// Minimum execution time: 156_476 nanoseconds.
		Weight::from_ref_time(157_462_000 as u64)
			.saturating_add(T::DbWeight::get().reads(6 as u64))
			.saturating_add(T::DbWeight::get().writes(4 as u64))
	}
	// Storage: Contracts CodeStorage (r:1 w:1)
	// Storage: System EventTopics (r:1 w:1)
	// Storage: Contracts PristineCode (r:0 w:1)
	// Storage: Contracts OwnerInfoOf (r:0 w:1)
	/// The range of component `c` is `[0, 64226]`.
	fn upload_code(c: u32, ) -> Weight {
		// Minimum execution time: 295_320 nanoseconds.
		Weight::from_ref_time(305_011_007 as u64)
			// Standard Error: 53
			.saturating_add(Weight::from_ref_time(77_528 as u64).saturating_mul(c as u64))
			.saturating_add(T::DbWeight::get().reads(2 as u64))
			.saturating_add(T::DbWeight::get().writes(4 as u64))
	}
	// Storage: Contracts OwnerInfoOf (r:1 w:1)
	// Storage: System EventTopics (r:1 w:1)
	// Storage: Contracts CodeStorage (r:0 w:1)
	// Storage: Contracts PristineCode (r:0 w:1)
	fn remove_code() -> Weight {
		// Minimum execution time: 39_868 nanoseconds.
		Weight::from_ref_time(40_885_000 as u64)
			.saturating_add(T::DbWeight::get().reads(2 as u64))
			.saturating_add(T::DbWeight::get().writes(4 as u64))
	}
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts OwnerInfoOf (r:2 w:2)
	// Storage: System EventTopics (r:3 w:3)
	fn set_code() -> Weight {
		// Minimum execution time: 42_082 nanoseconds.
		Weight::from_ref_time(42_487_000 as u64)
			.saturating_add(T::DbWeight::get().reads(6 as u64))
			.saturating_add(T::DbWeight::get().writes(6 as u64))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_caller(r: u32, ) -> Weight {
		// Minimum execution time: 295_276 nanoseconds.
		Weight::from_ref_time(300_528_395 as u64)
			// Standard Error: 22_438
			.saturating_add(Weight::from_ref_time(16_661_252 as u64).saturating_mul(r as u64))
			.saturating_add(T::DbWeight::get().reads(6 as u64))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_is_contract(r: u32, ) -> Weight {
		// Minimum execution time: 296_022 nanoseconds.
		Weight::from_ref_time(231_263_577 as u64)
			// Standard Error: 430_945
			.saturating_add(Weight::from_ref_time(199_389_344 as u64).saturating_mul(r as u64))
			.saturating_add(T::DbWeight::get().reads(6 as u64))
			.saturating_add(T::DbWeight::get().reads((80 as u64).saturating_mul(r as u64)))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_code_hash(r: u32, ) -> Weight {
		// Minimum execution time: 297_796 nanoseconds.
		Weight::from_ref_time(243_158_249 as u64)
			// Standard Error: 396_560
			.saturating_add(Weight::from_ref_time(242_784_462 as u64).saturating_mul(r as u64))
			.saturating_add(T::DbWeight::get().reads(6 as u64))
			.saturating_add(T::DbWeight::get().reads((80 as u64).saturating_mul(r as u64)))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_own_code_hash(r: u32, ) -> Weight {
		// Minimum execution time: 297_206 nanoseconds.
		Weight::from_ref_time(302_423_708 as u64)
			// Standard Error: 18_660
			.saturating_add(Weight::from_ref_time(20_507_825 as u64).saturating_mul(r as u64))
			.saturating_add(T::DbWeight::get().reads(6 as u64))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_caller_is_origin(r: u32, ) -> Weight {
		// Minimum execution time: 293_337 nanoseconds.
		Weight::from_ref_time(298_462_585 as u64)
			// Standard Error: 15_979
			.saturating_add(Weight::from_ref_time(11_165_786 as u64).saturating_mul(r as u64))
			.saturating_add(T::DbWeight::get().reads(6 as u64))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_address(r: u32, ) -> Weight {
		// Minimum execution time: 294_982 nanoseconds.
		Weight::from_ref_time(299_538_930 as u64)
			// Standard Error: 18_777
			.saturating_add(Weight::from_ref_time(16_575_318 as u64).saturating_mul(r as u64))
			.saturating_add(T::DbWeight::get().reads(6 as u64))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_gas_left(r: u32, ) -> Weight {
		// Minimum execution time: 295_266 nanoseconds.
		Weight::from_ref_time(301_023_294 as u64)
			// Standard Error: 18_987
			.saturating_add(Weight::from_ref_time(16_152_668 as u64).saturating_mul(r as u64))
			.saturating_add(T::DbWeight::get().reads(6 as u64))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_balance(r: u32, ) -> Weight {
		// Minimum execution time: 293_847 nanoseconds.
		Weight::from_ref_time(302_991_846 as u64)
			// Standard Error: 36_830
			.saturating_add(Weight::from_ref_time(89_091_598 as u64).saturating_mul(r as u64))
			.saturating_add(T::DbWeight::get().reads(7 as u64))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_value_transferred(r: u32, ) -> Weight {
		// Minimum execution time: 295_907 nanoseconds.
		Weight::from_ref_time(300_322_285 as u64)
			// Standard Error: 20_612
			.saturating_add(Weight::from_ref_time(16_199_834 as u64).saturating_mul(r as u64))
			.saturating_add(T::DbWeight::get().reads(6 as u64))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_minimum_balance(r: u32, ) -> Weight {
		// Minimum execution time: 295_042 nanoseconds.
		Weight::from_ref_time(299_750_507 as u64)
			// Standard Error: 19_981
			.saturating_add(Weight::from_ref_time(16_290_215 as u64).saturating_mul(r as u64))
			.saturating_add(T::DbWeight::get().reads(6 as u64))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_block_number(r: u32, ) -> Weight {
		// Minimum execution time: 295_129 nanoseconds.
		Weight::from_ref_time(301_389_224 as u64)
			// Standard Error: 20_956
			.saturating_add(Weight::from_ref_time(15_947_448 as u64).saturating_mul(r as u64))
			.saturating_add(T::DbWeight::get().reads(6 as u64))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_now(r: u32, ) -> Weight {
		// Minimum execution time: 295_128 nanoseconds.
		Weight::from_ref_time(299_569_582 as u64)
			// Standard Error: 18_853
			.saturating_add(Weight::from_ref_time(16_304_774 as u64).saturating_mul(r as u64))
			.saturating_add(T::DbWeight::get().reads(6 as u64))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	// Storage: TransactionPayment NextFeeMultiplier (r:1 w:0)
	/// The range of component `r` is `[0, 20]`.
	fn seal_weight_to_fee(r: u32, ) -> Weight {
		// Minimum execution time: 295_229 nanoseconds.
		Weight::from_ref_time(305_986_569 as u64)
			// Standard Error: 33_339
			.saturating_add(Weight::from_ref_time(85_497_208 as u64).saturating_mul(r as u64))
			.saturating_add(T::DbWeight::get().reads(7 as u64))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_gas(r: u32, ) -> Weight {
		// Minimum execution time: 144_560 nanoseconds.
		Weight::from_ref_time(147_780_996 as u64)
			// Standard Error: 8_658
			.saturating_add(Weight::from_ref_time(8_185_717 as u64).saturating_mul(r as u64))
			.saturating_add(T::DbWeight::get().reads(6 as u64))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_input(r: u32, ) -> Weight {
		// Minimum execution time: 291_869 nanoseconds.
		Weight::from_ref_time(300_501_085 as u64)
			// Standard Error: 17_955
			.saturating_add(Weight::from_ref_time(13_899_691 as u64).saturating_mul(r as u64))
			.saturating_add(T::DbWeight::get().reads(6 as u64))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `n` is `[0, 1024]`.
	fn seal_input_per_kb(n: u32, ) -> Weight {
		// Minimum execution time: 312_247 nanoseconds.
		Weight::from_ref_time(327_623_543 as u64)
			// Standard Error: 1_162
			.saturating_add(Weight::from_ref_time(9_752_573 as u64).saturating_mul(n as u64))
			.saturating_add(T::DbWeight::get().reads(6 as u64))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 1]`.
	fn seal_return(r: u32, ) -> Weight {
		// Minimum execution time: 290_105 nanoseconds.
		Weight::from_ref_time(296_353_112 as u64)
			// Standard Error: 558_302
			.saturating_add(Weight::from_ref_time(1_012_487 as u64).saturating_mul(r as u64))
			.saturating_add(T::DbWeight::get().reads(6 as u64))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `n` is `[0, 1024]`.
	fn seal_return_per_kb(n: u32, ) -> Weight {
		// Minimum execution time: 295_097 nanoseconds.
		Weight::from_ref_time(298_173_380 as u64)
			// Standard Error: 325
			.saturating_add(Weight::from_ref_time(191_050 as u64).saturating_mul(n as u64))
			.saturating_add(T::DbWeight::get().reads(6 as u64))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	// Storage: Contracts DeletionQueue (r:1 w:1)
	// Storage: Contracts OwnerInfoOf (r:1 w:1)
	/// The range of component `r` is `[0, 1]`.
	fn seal_terminate(r: u32, ) -> Weight {
		// Minimum execution time: 291_339 nanoseconds.
		Weight::from_ref_time(297_328_822 as u64)
			// Standard Error: 536_109
			.saturating_add(Weight::from_ref_time(53_529_277 as u64).saturating_mul(r as u64))
			.saturating_add(T::DbWeight::get().reads(6 as u64))
			.saturating_add(T::DbWeight::get().reads((5 as u64).saturating_mul(r as u64)))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
			.saturating_add(T::DbWeight::get().writes((6 as u64).saturating_mul(r as u64)))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	// Storage: RandomnessCollectiveFlip RandomMaterial (r:1 w:0)
	/// The range of component `r` is `[0, 20]`.
	fn seal_random(r: u32, ) -> Weight {
		// Minimum execution time: 292_833 nanoseconds.
		Weight::from_ref_time(303_220_868 as u64)
			// Standard Error: 46_963
			.saturating_add(Weight::from_ref_time(108_698_031 as u64).saturating_mul(r as u64))
			.saturating_add(T::DbWeight::get().reads(7 as u64))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_deposit_event(r: u32, ) -> Weight {
		// Minimum execution time: 293_111 nanoseconds.
		Weight::from_ref_time(304_357_752 as u64)
			// Standard Error: 84_942
			.saturating_add(Weight::from_ref_time(218_943_695 as u64).saturating_mul(r as u64))
			.saturating_add(T::DbWeight::get().reads(6 as u64))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `t` is `[0, 4]`.
	/// The range of component `n` is `[0, 16]`.
	fn seal_deposit_event_per_topic_and_kb(t: u32, n: u32, ) -> Weight {
		// Minimum execution time: 1_188_981 nanoseconds.
		Weight::from_ref_time(494_557_508 as u64)
			// Standard Error: 335_039
			.saturating_add(Weight::from_ref_time(176_656_427 as u64).saturating_mul(t as u64))
			// Standard Error: 92_018
			.saturating_add(Weight::from_ref_time(70_000_320 as u64).saturating_mul(n as u64))
			.saturating_add(T::DbWeight::get().reads(6 as u64))
			.saturating_add(T::DbWeight::get().reads((80 as u64).saturating_mul(t as u64)))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
			.saturating_add(T::DbWeight::get().writes((80 as u64).saturating_mul(t as u64)))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_debug_message(r: u32, ) -> Weight {
		// Minimum execution time: 157_568 nanoseconds.
		Weight::from_ref_time(161_449_917 as u64)
			// Standard Error: 13_938
			.saturating_add(Weight::from_ref_time(12_897_245 as u64).saturating_mul(r as u64))
			.saturating_add(T::DbWeight::get().reads(6 as u64))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	/// The range of component `r` is `[0, 10]`.
	fn seal_set_storage(r: u32, ) -> Weight {
		// Minimum execution time: 294_001 nanoseconds.
		Weight::from_ref_time(248_958_000 as u64)
			// Standard Error: 472_012
			.saturating_add(Weight::from_ref_time(418_368_781 as u64).saturating_mul(r as u64))
			.saturating_add(T::DbWeight::get().reads(6 as u64))
			.saturating_add(T::DbWeight::get().reads((80 as u64).saturating_mul(r as u64)))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
			.saturating_add(T::DbWeight::get().writes((80 as u64).saturating_mul(r as u64)))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	/// The range of component `n` is `[0, 8]`.
	fn seal_set_storage_per_new_kb(n: u32, ) -> Weight {
		// Minimum execution time: 433_239 nanoseconds.
		Weight::from_ref_time(588_857_373 as u64)
			// Standard Error: 1_426_031
			.saturating_add(Weight::from_ref_time(92_895_050 as u64).saturating_mul(n as u64))
			.saturating_add(T::DbWeight::get().reads(52 as u64))
			.saturating_add(T::DbWeight::get().reads((7 as u64).saturating_mul(n as u64)))
			.saturating_add(T::DbWeight::get().writes(50 as u64))
			.saturating_add(T::DbWeight::get().writes((7 as u64).saturating_mul(n as u64)))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	/// The range of component `n` is `[0, 8]`.
	fn seal_set_storage_per_old_kb(n: u32, ) -> Weight {
		// Minimum execution time: 432_591 nanoseconds.
		Weight::from_ref_time(563_499_766 as u64)
			// Standard Error: 1_212_322
			.saturating_add(Weight::from_ref_time(65_491_920 as u64).saturating_mul(n as u64))
			.saturating_add(T::DbWeight::get().reads(51 as u64))
			.saturating_add(T::DbWeight::get().reads((7 as u64).saturating_mul(n as u64)))
			.saturating_add(T::DbWeight::get().writes(49 as u64))
			.saturating_add(T::DbWeight::get().writes((7 as u64).saturating_mul(n as u64)))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	/// The range of component `r` is `[0, 10]`.
	fn seal_clear_storage(r: u32, ) -> Weight {
		// Minimum execution time: 295_678 nanoseconds.
		Weight::from_ref_time(250_903_819 as u64)
			// Standard Error: 483_469
			.saturating_add(Weight::from_ref_time(410_221_708 as u64).saturating_mul(r as u64))
			.saturating_add(T::DbWeight::get().reads(6 as u64))
			.saturating_add(T::DbWeight::get().reads((80 as u64).saturating_mul(r as u64)))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
			.saturating_add(T::DbWeight::get().writes((80 as u64).saturating_mul(r as u64)))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	/// The range of component `n` is `[0, 8]`.
	fn seal_clear_storage_per_kb(n: u32, ) -> Weight {
		// Minimum execution time: 401_147 nanoseconds.
		Weight::from_ref_time(547_029_800 as u64)
			// Standard Error: 1_350_158
			.saturating_add(Weight::from_ref_time(66_946_722 as u64).saturating_mul(n as u64))
			.saturating_add(T::DbWeight::get().reads(51 as u64))
			.saturating_add(T::DbWeight::get().reads((7 as u64).saturating_mul(n as u64)))
			.saturating_add(T::DbWeight::get().writes(48 as u64))
			.saturating_add(T::DbWeight::get().writes((7 as u64).saturating_mul(n as u64)))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	/// The range of component `r` is `[0, 10]`.
	fn seal_get_storage(r: u32, ) -> Weight {
		// Minimum execution time: 296_061 nanoseconds.
		Weight::from_ref_time(257_651_770 as u64)
			// Standard Error: 444_344
			.saturating_add(Weight::from_ref_time(329_428_375 as u64).saturating_mul(r as u64))
			.saturating_add(T::DbWeight::get().reads(6 as u64))
			.saturating_add(T::DbWeight::get().reads((80 as u64).saturating_mul(r as u64)))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	/// The range of component `n` is `[0, 8]`.
	fn seal_get_storage_per_kb(n: u32, ) -> Weight {
		// Minimum execution time: 377_320 nanoseconds.
		Weight::from_ref_time(506_517_859 as u64)
			// Standard Error: 1_210_985
			.saturating_add(Weight::from_ref_time(154_977_621 as u64).saturating_mul(n as u64))
			.saturating_add(T::DbWeight::get().reads(51 as u64))
			.saturating_add(T::DbWeight::get().reads((7 as u64).saturating_mul(n as u64)))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	/// The range of component `r` is `[0, 10]`.
	fn seal_contains_storage(r: u32, ) -> Weight {
		// Minimum execution time: 296_753 nanoseconds.
		Weight::from_ref_time(260_829_553 as u64)
			// Standard Error: 432_834
			.saturating_add(Weight::from_ref_time(317_967_995 as u64).saturating_mul(r as u64))
			.saturating_add(T::DbWeight::get().reads(6 as u64))
			.saturating_add(T::DbWeight::get().reads((80 as u64).saturating_mul(r as u64)))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	/// The range of component `n` is `[0, 8]`.
	fn seal_contains_storage_per_kb(n: u32, ) -> Weight {
		// Minimum execution time: 373_049 nanoseconds.
		Weight::from_ref_time(484_443_595 as u64)
			// Standard Error: 1_048_752
			.saturating_add(Weight::from_ref_time(64_192_391 as u64).saturating_mul(n as u64))
			.saturating_add(T::DbWeight::get().reads(51 as u64))
			.saturating_add(T::DbWeight::get().reads((7 as u64).saturating_mul(n as u64)))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	/// The range of component `r` is `[0, 10]`.
	fn seal_take_storage(r: u32, ) -> Weight {
		// Minimum execution time: 297_893 nanoseconds.
		Weight::from_ref_time(256_830_685 as u64)
			// Standard Error: 436_220
			.saturating_add(Weight::from_ref_time(418_336_409 as u64).saturating_mul(r as u64))
			.saturating_add(T::DbWeight::get().reads(6 as u64))
			.saturating_add(T::DbWeight::get().reads((80 as u64).saturating_mul(r as u64)))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
			.saturating_add(T::DbWeight::get().writes((80 as u64).saturating_mul(r as u64)))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	/// The range of component `n` is `[0, 8]`.
	fn seal_take_storage_per_kb(n: u32, ) -> Weight {
		// Minimum execution time: 402_327 nanoseconds.
		Weight::from_ref_time(562_732_190 as u64)
			// Standard Error: 1_453_818
			.saturating_add(Weight::from_ref_time(159_662_683 as u64).saturating_mul(n as u64))
			.saturating_add(T::DbWeight::get().reads(51 as u64))
			.saturating_add(T::DbWeight::get().reads((7 as u64).saturating_mul(n as u64)))
			.saturating_add(T::DbWeight::get().writes(48 as u64))
			.saturating_add(T::DbWeight::get().writes((7 as u64).saturating_mul(n as u64)))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_transfer(r: u32, ) -> Weight {
		// Minimum execution time: 298_014 nanoseconds.
		Weight::from_ref_time(248_052_379 as u64)
			// Standard Error: 595_597
			.saturating_add(Weight::from_ref_time(1_341_846_920 as u64).saturating_mul(r as u64))
			.saturating_add(T::DbWeight::get().reads(7 as u64))
			.saturating_add(T::DbWeight::get().reads((80 as u64).saturating_mul(r as u64)))
			.saturating_add(T::DbWeight::get().writes(4 as u64))
			.saturating_add(T::DbWeight::get().writes((80 as u64).saturating_mul(r as u64)))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_call(r: u32, ) -> Weight {
		// Minimum execution time: 298_250 nanoseconds.
		Weight::from_ref_time(299_254_000 as u64)
			// Standard Error: 8_061_285
			.saturating_add(Weight::from_ref_time(21_176_072_564 as u64).saturating_mul(r as u64))
			.saturating_add(T::DbWeight::get().reads(7 as u64))
			.saturating_add(T::DbWeight::get().reads((160 as u64).saturating_mul(r as u64)))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
			.saturating_add(T::DbWeight::get().writes((160 as u64).saturating_mul(r as u64)))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_delegate_call(r: u32, ) -> Weight {
		// Minimum execution time: 300_286 nanoseconds.
		Weight::from_ref_time(505_420_101 as u64)
			// Standard Error: 12_020_807
			.saturating_add(Weight::from_ref_time(20_502_779_430 as u64).saturating_mul(r as u64))
			.saturating_add(T::DbWeight::get().reads(6 as u64))
			.saturating_add(T::DbWeight::get().reads((150 as u64).saturating_mul(r as u64)))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
			.saturating_add(T::DbWeight::get().writes((75 as u64).saturating_mul(r as u64)))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:81 w:81)
	// Storage: Contracts CodeStorage (r:2 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:82 w:82)
	/// The range of component `t` is `[0, 1]`.
	/// The range of component `c` is `[0, 1024]`.
	fn seal_call_per_transfer_clone_kb(t: u32, c: u32, ) -> Weight {
		// Minimum execution time: 9_465_740 nanoseconds.
		Weight::from_ref_time(8_443_609_945 as u64)
			// Standard Error: 6_130_641
			.saturating_add(Weight::from_ref_time(1_269_904_453 as u64).saturating_mul(t as u64))
			// Standard Error: 9_192
			.saturating_add(Weight::from_ref_time(9_821_368 as u64).saturating_mul(c as u64))
			.saturating_add(T::DbWeight::get().reads(167 as u64))
			.saturating_add(T::DbWeight::get().reads((81 as u64).saturating_mul(t as u64)))
			.saturating_add(T::DbWeight::get().writes(163 as u64))
			.saturating_add(T::DbWeight::get().writes((81 as u64).saturating_mul(t as u64)))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	// Storage: Contracts Nonce (r:1 w:1)
	// Storage: Contracts OwnerInfoOf (r:80 w:80)
	/// The range of component `r` is `[0, 20]`.
	fn seal_instantiate(r: u32, ) -> Weight {
		// Minimum execution time: 293_708 nanoseconds.
		Weight::from_ref_time(294_333_000 as u64)
			// Standard Error: 19_087_339
			.saturating_add(Weight::from_ref_time(25_796_470_079 as u64).saturating_mul(r as u64))
			.saturating_add(T::DbWeight::get().reads(8 as u64))
			.saturating_add(T::DbWeight::get().reads((400 as u64).saturating_mul(r as u64)))
			.saturating_add(T::DbWeight::get().writes(5 as u64))
			.saturating_add(T::DbWeight::get().writes((400 as u64).saturating_mul(r as u64)))
	}
	// Storage: System Account (r:81 w:81)
	// Storage: Contracts ContractInfoOf (r:81 w:81)
	// Storage: Contracts CodeStorage (r:2 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Contracts Nonce (r:1 w:1)
	// Storage: Contracts OwnerInfoOf (r:1 w:1)
	// Storage: System EventTopics (r:82 w:82)
	/// The range of component `t` is `[0, 1]`.
	/// The range of component `s` is `[0, 960]`.
	fn seal_instantiate_per_transfer_salt_kb(t: u32, s: u32, ) -> Weight {
		// Minimum execution time: 11_500_978 nanoseconds.
		Weight::from_ref_time(11_033_266_932 as u64)
			// Standard Error: 48_183_801
			.saturating_add(Weight::from_ref_time(36_156_854 as u64).saturating_mul(t as u64))
			// Standard Error: 77_067
			.saturating_add(Weight::from_ref_time(122_691_370 as u64).saturating_mul(s as u64))
			.saturating_add(T::DbWeight::get().reads(249 as u64))
			.saturating_add(T::DbWeight::get().reads((1 as u64).saturating_mul(t as u64)))
			.saturating_add(T::DbWeight::get().writes(247 as u64))
			.saturating_add(T::DbWeight::get().writes((1 as u64).saturating_mul(t as u64)))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 1]`.
	fn seal_hash_sha2_256(r: u32, ) -> Weight {
		// Minimum execution time: 287_534 nanoseconds.
		Weight::from_ref_time(292_978_777 as u64)
			// Standard Error: 612_499
			.saturating_add(Weight::from_ref_time(41_539_022 as u64).saturating_mul(r as u64))
			.saturating_add(T::DbWeight::get().reads(6 as u64))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `n` is `[0, 1024]`.
	fn seal_hash_sha2_256_per_kb(n: u32, ) -> Weight {
		// Minimum execution time: 331_137 nanoseconds.
		Weight::from_ref_time(332_503_000 as u64)
			// Standard Error: 56_729
			.saturating_add(Weight::from_ref_time(325_461_347 as u64).saturating_mul(n as u64))
			.saturating_add(T::DbWeight::get().reads(6 as u64))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 1]`.
	fn seal_hash_keccak_256(r: u32, ) -> Weight {
		// Minimum execution time: 288_957 nanoseconds.
		Weight::from_ref_time(292_957_579 as u64)
			// Standard Error: 636_977
			.saturating_add(Weight::from_ref_time(60_789_720 as u64).saturating_mul(r as u64))
			.saturating_add(T::DbWeight::get().reads(6 as u64))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `n` is `[0, 1024]`.
	fn seal_hash_keccak_256_per_kb(n: u32, ) -> Weight {
		// Minimum execution time: 343_123 nanoseconds.
		Weight::from_ref_time(343_741_000 as u64)
			// Standard Error: 58_203
			.saturating_add(Weight::from_ref_time(247_808_004 as u64).saturating_mul(n as u64))
			.saturating_add(T::DbWeight::get().reads(6 as u64))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 1]`.
	fn seal_hash_blake2_256(r: u32, ) -> Weight {
		// Minimum execution time: 286_493 nanoseconds.
		Weight::from_ref_time(293_256_030 as u64)
			// Standard Error: 608_271
			.saturating_add(Weight::from_ref_time(31_193_669 as u64).saturating_mul(r as u64))
			.saturating_add(T::DbWeight::get().reads(6 as u64))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `n` is `[0, 1024]`.
	fn seal_hash_blake2_256_per_kb(n: u32, ) -> Weight {
		// Minimum execution time: 321_692 nanoseconds.
		Weight::from_ref_time(322_518_000 as u64)
			// Standard Error: 50_856
			.saturating_add(Weight::from_ref_time(99_851_120 as u64).saturating_mul(n as u64))
			.saturating_add(T::DbWeight::get().reads(6 as u64))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 1]`.
	fn seal_hash_blake2_128(r: u32, ) -> Weight {
		// Minimum execution time: 285_829 nanoseconds.
		Weight::from_ref_time(291_929_059 as u64)
			// Standard Error: 609_982
			.saturating_add(Weight::from_ref_time(30_437_840 as u64).saturating_mul(r as u64))
			.saturating_add(T::DbWeight::get().reads(6 as u64))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `n` is `[0, 1024]`.
	fn seal_hash_blake2_128_per_kb(n: u32, ) -> Weight {
		// Minimum execution time: 320_218 nanoseconds.
		Weight::from_ref_time(320_820_000 as u64)
			// Standard Error: 49_721
			.saturating_add(Weight::from_ref_time(99_723_926 as u64).saturating_mul(n as u64))
			.saturating_add(T::DbWeight::get().reads(6 as u64))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 1]`.
	fn seal_ecdsa_recover(r: u32, ) -> Weight {
		// Minimum execution time: 287_068 nanoseconds.
		Weight::from_ref_time(294_064_673 as u64)
			// Standard Error: 818_242
			.saturating_add(Weight::from_ref_time(3_038_409_926 as u64).saturating_mul(r as u64))
			.saturating_add(T::DbWeight::get().reads(6 as u64))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 1]`.
	fn seal_ecdsa_to_eth_address(r: u32, ) -> Weight {
		// Minimum execution time: 287_271 nanoseconds.
		Weight::from_ref_time(293_100_328 as u64)
			// Standard Error: 658_900
			.saturating_add(Weight::from_ref_time(2_070_519_571 as u64).saturating_mul(r as u64))
			.saturating_add(T::DbWeight::get().reads(6 as u64))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	// Storage: Contracts OwnerInfoOf (r:16 w:16)
	/// The range of component `r` is `[0, 20]`.
	fn seal_set_code_hash(r: u32, ) -> Weight {
		// Minimum execution time: 289_181 nanoseconds.
		Weight::from_ref_time(290_618_000 as u64)
			// Standard Error: 2_652_670
			.saturating_add(Weight::from_ref_time(1_362_797_408 as u64).saturating_mul(r as u64))
			.saturating_add(T::DbWeight::get().reads(6 as u64))
			.saturating_add(T::DbWeight::get().reads((225 as u64).saturating_mul(r as u64)))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
			.saturating_add(T::DbWeight::get().writes((150 as u64).saturating_mul(r as u64)))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_reentrance_count(r: u32, ) -> Weight {
		// Minimum execution time: 290_954 nanoseconds.
		Weight::from_ref_time(295_190_436 as u64)
			// Standard Error: 40_295
			.saturating_add(Weight::from_ref_time(11_022_974 as u64).saturating_mul(r as u64))
			.saturating_add(T::DbWeight::get().reads(6 as u64))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_account_reentrance_count(r: u32, ) -> Weight {
		// Minimum execution time: 292_817 nanoseconds.
		Weight::from_ref_time(331_195_835 as u64)
			// Standard Error: 126_642
			.saturating_add(Weight::from_ref_time(25_590_472 as u64).saturating_mul(r as u64))
			.saturating_add(T::DbWeight::get().reads(6 as u64))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64const(r: u32, ) -> Weight {
		// Minimum execution time: 605 nanoseconds.
		Weight::from_ref_time(866_109 as u64)
			// Standard Error: 275
			.saturating_add(Weight::from_ref_time(346_136 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64load(r: u32, ) -> Weight {
		// Minimum execution time: 718 nanoseconds.
		Weight::from_ref_time(1_402_372 as u64)
			// Standard Error: 2_693
			.saturating_add(Weight::from_ref_time(985_910 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64store(r: u32, ) -> Weight {
		// Minimum execution time: 706 nanoseconds.
		Weight::from_ref_time(1_120_197 as u64)
			// Standard Error: 394
			.saturating_add(Weight::from_ref_time(889_593 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_select(r: u32, ) -> Weight {
		// Minimum execution time: 644 nanoseconds.
		Weight::from_ref_time(1_057_422 as u64)
			// Standard Error: 857
			.saturating_add(Weight::from_ref_time(955_777 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_if(r: u32, ) -> Weight {
		// Minimum execution time: 637 nanoseconds.
		Weight::from_ref_time(629_141 as u64)
			// Standard Error: 544
			.saturating_add(Weight::from_ref_time(1_293_126 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_br(r: u32, ) -> Weight {
		// Minimum execution time: 608 nanoseconds.
		Weight::from_ref_time(1_113_576 as u64)
			// Standard Error: 880
			.saturating_add(Weight::from_ref_time(527_673 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_br_if(r: u32, ) -> Weight {
		// Minimum execution time: 624 nanoseconds.
		Weight::from_ref_time(170_717 as u64)
			// Standard Error: 1_959
			.saturating_add(Weight::from_ref_time(867_748 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_br_table(r: u32, ) -> Weight {
		// Minimum execution time: 648 nanoseconds.
		Weight::from_ref_time(539_108 as u64)
			// Standard Error: 1_490
			.saturating_add(Weight::from_ref_time(1_077_401 as u64).saturating_mul(r as u64))
	}
	/// The range of component `e` is `[1, 256]`.
	fn instr_br_table_per_entry(e: u32, ) -> Weight {
		// Minimum execution time: 2_179 nanoseconds.
		Weight::from_ref_time(2_597_080 as u64)
			// Standard Error: 74
			.saturating_add(Weight::from_ref_time(4_865 as u64).saturating_mul(e as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_call(r: u32, ) -> Weight {
		// Minimum execution time: 633 nanoseconds.
		Weight::from_ref_time(1_498_082 as u64)
			// Standard Error: 1_780
			.saturating_add(Weight::from_ref_time(2_198_342 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_call_indirect(r: u32, ) -> Weight {
		// Minimum execution time: 806 nanoseconds.
		Weight::from_ref_time(1_904_912 as u64)
			// Standard Error: 1_182
			.saturating_add(Weight::from_ref_time(2_801_959 as u64).saturating_mul(r as u64))
	}
	/// The range of component `p` is `[0, 128]`.
	fn instr_call_indirect_per_param(p: u32, ) -> Weight {
		// Minimum execution time: 4_219 nanoseconds.
		Weight::from_ref_time(5_152_036 as u64)
			// Standard Error: 290
			.saturating_add(Weight::from_ref_time(179_507 as u64).saturating_mul(p as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_local_get(r: u32, ) -> Weight {
		// Minimum execution time: 1_438 nanoseconds.
		Weight::from_ref_time(1_730_599 as u64)
			// Standard Error: 208
			.saturating_add(Weight::from_ref_time(364_842 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_local_set(r: u32, ) -> Weight {
		// Minimum execution time: 1_430 nanoseconds.
		Weight::from_ref_time(1_671_358 as u64)
			// Standard Error: 276
			.saturating_add(Weight::from_ref_time(383_715 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_local_tee(r: u32, ) -> Weight {
		// Minimum execution time: 1_394 nanoseconds.
		Weight::from_ref_time(1_708_668 as u64)
			// Standard Error: 199
			.saturating_add(Weight::from_ref_time(526_648 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_global_get(r: u32, ) -> Weight {
		// Minimum execution time: 713 nanoseconds.
		Weight::from_ref_time(1_095_871 as u64)
			// Standard Error: 343
			.saturating_add(Weight::from_ref_time(811_365 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_global_set(r: u32, ) -> Weight {
		// Minimum execution time: 727 nanoseconds.
		Weight::from_ref_time(1_056_556 as u64)
			// Standard Error: 355
			.saturating_add(Weight::from_ref_time(830_505 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_memory_current(r: u32, ) -> Weight {
		// Minimum execution time: 753 nanoseconds.
		Weight::from_ref_time(1_004_624 as u64)
			// Standard Error: 259
			.saturating_add(Weight::from_ref_time(693_886 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 1]`.
	fn instr_memory_grow(r: u32, ) -> Weight {
		// Minimum execution time: 649 nanoseconds.
		Weight::from_ref_time(742_979 as u64)
			// Standard Error: 5_852
			.saturating_add(Weight::from_ref_time(184_932_720 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64clz(r: u32, ) -> Weight {
		// Minimum execution time: 615 nanoseconds.
		Weight::from_ref_time(919_735 as u64)
			// Standard Error: 443
			.saturating_add(Weight::from_ref_time(509_234 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64ctz(r: u32, ) -> Weight {
		// Minimum execution time: 623 nanoseconds.
		Weight::from_ref_time(883_408 as u64)
			// Standard Error: 437
			.saturating_add(Weight::from_ref_time(517_270 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64popcnt(r: u32, ) -> Weight {
		// Minimum execution time: 613 nanoseconds.
		Weight::from_ref_time(819_503 as u64)
			// Standard Error: 704
			.saturating_add(Weight::from_ref_time(518_031 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64eqz(r: u32, ) -> Weight {
		// Minimum execution time: 647 nanoseconds.
		Weight::from_ref_time(922_130 as u64)
			// Standard Error: 384
			.saturating_add(Weight::from_ref_time(525_187 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64extendsi32(r: u32, ) -> Weight {
		// Minimum execution time: 592 nanoseconds.
		Weight::from_ref_time(930_340 as u64)
			// Standard Error: 277
			.saturating_add(Weight::from_ref_time(505_104 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64extendui32(r: u32, ) -> Weight {
		// Minimum execution time: 661 nanoseconds.
		Weight::from_ref_time(942_938 as u64)
			// Standard Error: 268
			.saturating_add(Weight::from_ref_time(504_997 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i32wrapi64(r: u32, ) -> Weight {
		// Minimum execution time: 613 nanoseconds.
		Weight::from_ref_time(864_875 as u64)
			// Standard Error: 720
			.saturating_add(Weight::from_ref_time(508_015 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64eq(r: u32, ) -> Weight {
		// Minimum execution time: 609 nanoseconds.
		Weight::from_ref_time(964_975 as u64)
			// Standard Error: 508
			.saturating_add(Weight::from_ref_time(732_494 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64ne(r: u32, ) -> Weight {
		// Minimum execution time: 608 nanoseconds.
		Weight::from_ref_time(991_551 as u64)
			// Standard Error: 1_126
			.saturating_add(Weight::from_ref_time(731_593 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64lts(r: u32, ) -> Weight {
		// Minimum execution time: 608 nanoseconds.
		Weight::from_ref_time(938_821 as u64)
			// Standard Error: 535
			.saturating_add(Weight::from_ref_time(741_527 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64ltu(r: u32, ) -> Weight {
		// Minimum execution time: 634 nanoseconds.
		Weight::from_ref_time(969_389 as u64)
			// Standard Error: 421
			.saturating_add(Weight::from_ref_time(743_647 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64gts(r: u32, ) -> Weight {
		// Minimum execution time: 620 nanoseconds.
		Weight::from_ref_time(997_361 as u64)
			// Standard Error: 540
			.saturating_add(Weight::from_ref_time(748_108 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64gtu(r: u32, ) -> Weight {
		// Minimum execution time: 586 nanoseconds.
		Weight::from_ref_time(966_929 as u64)
			// Standard Error: 524
			.saturating_add(Weight::from_ref_time(760_077 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64les(r: u32, ) -> Weight {
		// Minimum execution time: 623 nanoseconds.
		Weight::from_ref_time(974_811 as u64)
			// Standard Error: 528
			.saturating_add(Weight::from_ref_time(745_124 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64leu(r: u32, ) -> Weight {
		// Minimum execution time: 608 nanoseconds.
		Weight::from_ref_time(990_326 as u64)
			// Standard Error: 535
			.saturating_add(Weight::from_ref_time(808_599 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64ges(r: u32, ) -> Weight {
		// Minimum execution time: 600 nanoseconds.
		Weight::from_ref_time(969_957 as u64)
			// Standard Error: 604
			.saturating_add(Weight::from_ref_time(744_174 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64geu(r: u32, ) -> Weight {
		// Minimum execution time: 632 nanoseconds.
		Weight::from_ref_time(976_250 as u64)
			// Standard Error: 938
			.saturating_add(Weight::from_ref_time(798_224 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64add(r: u32, ) -> Weight {
		// Minimum execution time: 627 nanoseconds.
		Weight::from_ref_time(939_131 as u64)
			// Standard Error: 457
			.saturating_add(Weight::from_ref_time(718_514 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64sub(r: u32, ) -> Weight {
		// Minimum execution time: 621 nanoseconds.
		Weight::from_ref_time(905_432 as u64)
			// Standard Error: 637
			.saturating_add(Weight::from_ref_time(716_365 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64mul(r: u32, ) -> Weight {
		// Minimum execution time: 610 nanoseconds.
		Weight::from_ref_time(926_074 as u64)
			// Standard Error: 457
			.saturating_add(Weight::from_ref_time(716_003 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64divs(r: u32, ) -> Weight {
		// Minimum execution time: 595 nanoseconds.
		Weight::from_ref_time(1_023_054 as u64)
			// Standard Error: 2_584
			.saturating_add(Weight::from_ref_time(1_349_736 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64divu(r: u32, ) -> Weight {
		// Minimum execution time: 608 nanoseconds.
		Weight::from_ref_time(966_937 as u64)
			// Standard Error: 786
			.saturating_add(Weight::from_ref_time(1_284_291 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64rems(r: u32, ) -> Weight {
		// Minimum execution time: 628 nanoseconds.
		Weight::from_ref_time(972_082 as u64)
			// Standard Error: 1_441
			.saturating_add(Weight::from_ref_time(1_403_148 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64remu(r: u32, ) -> Weight {
		// Minimum execution time: 644 nanoseconds.
		Weight::from_ref_time(991_706 as u64)
			// Standard Error: 1_103
			.saturating_add(Weight::from_ref_time(1_284_545 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64and(r: u32, ) -> Weight {
		// Minimum execution time: 630 nanoseconds.
		Weight::from_ref_time(941_587 as u64)
			// Standard Error: 506
			.saturating_add(Weight::from_ref_time(719_943 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64or(r: u32, ) -> Weight {
		// Minimum execution time: 624 nanoseconds.
		Weight::from_ref_time(939_991 as u64)
			// Standard Error: 520
			.saturating_add(Weight::from_ref_time(719_994 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64xor(r: u32, ) -> Weight {
		// Minimum execution time: 609 nanoseconds.
		Weight::from_ref_time(970_308 as u64)
			// Standard Error: 552
			.saturating_add(Weight::from_ref_time(719_566 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64shl(r: u32, ) -> Weight {
		// Minimum execution time: 613 nanoseconds.
		Weight::from_ref_time(920_835 as u64)
			// Standard Error: 623
			.saturating_add(Weight::from_ref_time(737_690 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64shrs(r: u32, ) -> Weight {
		// Minimum execution time: 626 nanoseconds.
		Weight::from_ref_time(919_030 as u64)
			// Standard Error: 486
			.saturating_add(Weight::from_ref_time(737_096 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64shru(r: u32, ) -> Weight {
		// Minimum execution time: 634 nanoseconds.
		Weight::from_ref_time(964_779 as u64)
			// Standard Error: 496
			.saturating_add(Weight::from_ref_time(736_322 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64rotl(r: u32, ) -> Weight {
		// Minimum execution time: 631 nanoseconds.
		Weight::from_ref_time(918_768 as u64)
			// Standard Error: 952
			.saturating_add(Weight::from_ref_time(740_280 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64rotr(r: u32, ) -> Weight {
		// Minimum execution time: 639 nanoseconds.
		Weight::from_ref_time(955_994 as u64)
			// Standard Error: 523
			.saturating_add(Weight::from_ref_time(738_232 as u64).saturating_mul(r as u64))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	// Storage: Contracts DeletionQueue (r:1 w:0)
	fn on_process_deletion_queue_batch() -> Weight {
		// Minimum execution time: 3_092 nanoseconds.
		Weight::from_ref_time(3_273_000 as u64)
			.saturating_add(RocksDbWeight::get().reads(1 as u64))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	/// The range of component `k` is `[0, 1024]`.
	fn on_initialize_per_trie_key(k: u32, ) -> Weight {
		// Minimum execution time: 15_553 nanoseconds.
		Weight::from_ref_time(17_898_219 as u64)
			// Standard Error: 612
			.saturating_add(Weight::from_ref_time(959_535 as u64).saturating_mul(k as u64))
			.saturating_add(RocksDbWeight::get().reads(1 as u64))
			.saturating_add(RocksDbWeight::get().writes(1 as u64))
			.saturating_add(RocksDbWeight::get().writes((1 as u64).saturating_mul(k as u64)))
	}
	// Storage: Contracts DeletionQueue (r:1 w:0)
	/// The range of component `q` is `[0, 128]`.
	fn on_initialize_per_queue_item(q: u32, ) -> Weight {
		// Minimum execution time: 3_051 nanoseconds.
		Weight::from_ref_time(16_045_885 as u64)
			// Standard Error: 3_894
			.saturating_add(Weight::from_ref_time(1_251_095 as u64).saturating_mul(q as u64))
			.saturating_add(RocksDbWeight::get().reads(1 as u64))
			.saturating_add(RocksDbWeight::get().writes(1 as u64))
	}
	// Storage: Contracts PristineCode (r:1 w:0)
	// Storage: Contracts CodeStorage (r:0 w:1)
	/// The range of component `c` is `[0, 64226]`.
	fn reinstrument(c: u32, ) -> Weight {
		// Minimum execution time: 29_767 nanoseconds.
		Weight::from_ref_time(24_442_384 as u64)
			// Standard Error: 41
			.saturating_add(Weight::from_ref_time(47_060 as u64).saturating_mul(c as u64))
			.saturating_add(RocksDbWeight::get().reads(1 as u64))
			.saturating_add(RocksDbWeight::get().writes(1 as u64))
	}
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System Account (r:1 w:1)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `c` is `[0, 131072]`.
	fn call_with_code_per_byte(c: u32, ) -> Weight {
		// Minimum execution time: 307_279 nanoseconds.
		Weight::from_ref_time(317_807_474 as u64)
			// Standard Error: 17
			.saturating_add(Weight::from_ref_time(30_874 as u64).saturating_mul(c as u64))
			.saturating_add(RocksDbWeight::get().reads(6 as u64))
			.saturating_add(RocksDbWeight::get().writes(4 as u64))
	}
	// Storage: Contracts CodeStorage (r:1 w:1)
	// Storage: Contracts Nonce (r:1 w:1)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System Account (r:1 w:1)
	// Storage: System EventTopics (r:3 w:3)
	// Storage: Contracts PristineCode (r:0 w:1)
	// Storage: Contracts OwnerInfoOf (r:0 w:1)
	/// The range of component `c` is `[0, 64226]`.
	/// The range of component `s` is `[0, 1048576]`.
	fn instantiate_with_code(c: u32, s: u32, ) -> Weight {
		// Minimum execution time: 2_173_376 nanoseconds.
		Weight::from_ref_time(333_991_198 as u64)
			// Standard Error: 47
			.saturating_add(Weight::from_ref_time(90_283 as u64).saturating_mul(c as u64))
			// Standard Error: 2
			.saturating_add(Weight::from_ref_time(1_782 as u64).saturating_mul(s as u64))
			.saturating_add(RocksDbWeight::get().reads(8 as u64))
			.saturating_add(RocksDbWeight::get().writes(9 as u64))
	}
	// Storage: Contracts CodeStorage (r:1 w:1)
	// Storage: Contracts Nonce (r:1 w:1)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System Account (r:1 w:1)
	// Storage: Contracts OwnerInfoOf (r:1 w:1)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `s` is `[0, 1048576]`.
	fn instantiate(s: u32, ) -> Weight {
		// Minimum execution time: 187_549 nanoseconds.
		Weight::from_ref_time(176_268_968 as u64)
			// Standard Error: 1
			.saturating_add(Weight::from_ref_time(1_525 as u64).saturating_mul(s as u64))
			.saturating_add(RocksDbWeight::get().reads(8 as u64))
			.saturating_add(RocksDbWeight::get().writes(7 as u64))
	}
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System Account (r:1 w:1)
	// Storage: System EventTopics (r:2 w:2)
	fn call() -> Weight {
		// Minimum execution time: 156_476 nanoseconds.
		Weight::from_ref_time(157_462_000 as u64)
			.saturating_add(RocksDbWeight::get().reads(6 as u64))
			.saturating_add(RocksDbWeight::get().writes(4 as u64))
	}
	// Storage: Contracts CodeStorage (r:1 w:1)
	// Storage: System EventTopics (r:1 w:1)
	// Storage: Contracts PristineCode (r:0 w:1)
	// Storage: Contracts OwnerInfoOf (r:0 w:1)
	/// The range of component `c` is `[0, 64226]`.
	fn upload_code(c: u32, ) -> Weight {
		// Minimum execution time: 295_320 nanoseconds.
		Weight::from_ref_time(305_011_007 as u64)
			// Standard Error: 53
			.saturating_add(Weight::from_ref_time(77_528 as u64).saturating_mul(c as u64))
			.saturating_add(RocksDbWeight::get().reads(2 as u64))
			.saturating_add(RocksDbWeight::get().writes(4 as u64))
	}
	// Storage: Contracts OwnerInfoOf (r:1 w:1)
	// Storage: System EventTopics (r:1 w:1)
	// Storage: Contracts CodeStorage (r:0 w:1)
	// Storage: Contracts PristineCode (r:0 w:1)
	fn remove_code() -> Weight {
		// Minimum execution time: 39_868 nanoseconds.
		Weight::from_ref_time(40_885_000 as u64)
			.saturating_add(RocksDbWeight::get().reads(2 as u64))
			.saturating_add(RocksDbWeight::get().writes(4 as u64))
	}
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts OwnerInfoOf (r:2 w:2)
	// Storage: System EventTopics (r:3 w:3)
	fn set_code() -> Weight {
		// Minimum execution time: 42_082 nanoseconds.
		Weight::from_ref_time(42_487_000 as u64)
			.saturating_add(RocksDbWeight::get().reads(6 as u64))
			.saturating_add(RocksDbWeight::get().writes(6 as u64))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_caller(r: u32, ) -> Weight {
		// Minimum execution time: 295_276 nanoseconds.
		Weight::from_ref_time(300_528_395 as u64)
			// Standard Error: 22_438
			.saturating_add(Weight::from_ref_time(16_661_252 as u64).saturating_mul(r as u64))
			.saturating_add(RocksDbWeight::get().reads(6 as u64))
			.saturating_add(RocksDbWeight::get().writes(3 as u64))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_is_contract(r: u32, ) -> Weight {
		// Minimum execution time: 296_022 nanoseconds.
		Weight::from_ref_time(231_263_577 as u64)
			// Standard Error: 430_945
			.saturating_add(Weight::from_ref_time(199_389_344 as u64).saturating_mul(r as u64))
			.saturating_add(RocksDbWeight::get().reads(6 as u64))
			.saturating_add(RocksDbWeight::get().reads((80 as u64).saturating_mul(r as u64)))
			.saturating_add(RocksDbWeight::get().writes(3 as u64))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_code_hash(r: u32, ) -> Weight {
		// Minimum execution time: 297_796 nanoseconds.
		Weight::from_ref_time(243_158_249 as u64)
			// Standard Error: 396_560
			.saturating_add(Weight::from_ref_time(242_784_462 as u64).saturating_mul(r as u64))
			.saturating_add(RocksDbWeight::get().reads(6 as u64))
			.saturating_add(RocksDbWeight::get().reads((80 as u64).saturating_mul(r as u64)))
			.saturating_add(RocksDbWeight::get().writes(3 as u64))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_own_code_hash(r: u32, ) -> Weight {
		// Minimum execution time: 297_206 nanoseconds.
		Weight::from_ref_time(302_423_708 as u64)
			// Standard Error: 18_660
			.saturating_add(Weight::from_ref_time(20_507_825 as u64).saturating_mul(r as u64))
			.saturating_add(RocksDbWeight::get().reads(6 as u64))
			.saturating_add(RocksDbWeight::get().writes(3 as u64))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_caller_is_origin(r: u32, ) -> Weight {
		// Minimum execution time: 293_337 nanoseconds.
		Weight::from_ref_time(298_462_585 as u64)
			// Standard Error: 15_979
			.saturating_add(Weight::from_ref_time(11_165_786 as u64).saturating_mul(r as u64))
			.saturating_add(RocksDbWeight::get().reads(6 as u64))
			.saturating_add(RocksDbWeight::get().writes(3 as u64))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_address(r: u32, ) -> Weight {
		// Minimum execution time: 294_982 nanoseconds.
		Weight::from_ref_time(299_538_930 as u64)
			// Standard Error: 18_777
			.saturating_add(Weight::from_ref_time(16_575_318 as u64).saturating_mul(r as u64))
			.saturating_add(RocksDbWeight::get().reads(6 as u64))
			.saturating_add(RocksDbWeight::get().writes(3 as u64))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_gas_left(r: u32, ) -> Weight {
		// Minimum execution time: 295_266 nanoseconds.
		Weight::from_ref_time(301_023_294 as u64)
			// Standard Error: 18_987
			.saturating_add(Weight::from_ref_time(16_152_668 as u64).saturating_mul(r as u64))
			.saturating_add(RocksDbWeight::get().reads(6 as u64))
			.saturating_add(RocksDbWeight::get().writes(3 as u64))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_balance(r: u32, ) -> Weight {
		// Minimum execution time: 293_847 nanoseconds.
		Weight::from_ref_time(302_991_846 as u64)
			// Standard Error: 36_830
			.saturating_add(Weight::from_ref_time(89_091_598 as u64).saturating_mul(r as u64))
			.saturating_add(RocksDbWeight::get().reads(7 as u64))
			.saturating_add(RocksDbWeight::get().writes(3 as u64))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_value_transferred(r: u32, ) -> Weight {
		// Minimum execution time: 295_907 nanoseconds.
		Weight::from_ref_time(300_322_285 as u64)
			// Standard Error: 20_612
			.saturating_add(Weight::from_ref_time(16_199_834 as u64).saturating_mul(r as u64))
			.saturating_add(RocksDbWeight::get().reads(6 as u64))
			.saturating_add(RocksDbWeight::get().writes(3 as u64))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_minimum_balance(r: u32, ) -> Weight {
		// Minimum execution time: 295_042 nanoseconds.
		Weight::from_ref_time(299_750_507 as u64)
			// Standard Error: 19_981
			.saturating_add(Weight::from_ref_time(16_290_215 as u64).saturating_mul(r as u64))
			.saturating_add(RocksDbWeight::get().reads(6 as u64))
			.saturating_add(RocksDbWeight::get().writes(3 as u64))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_block_number(r: u32, ) -> Weight {
		// Minimum execution time: 295_129 nanoseconds.
		Weight::from_ref_time(301_389_224 as u64)
			// Standard Error: 20_956
			.saturating_add(Weight::from_ref_time(15_947_448 as u64).saturating_mul(r as u64))
			.saturating_add(RocksDbWeight::get().reads(6 as u64))
			.saturating_add(RocksDbWeight::get().writes(3 as u64))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_now(r: u32, ) -> Weight {
		// Minimum execution time: 295_128 nanoseconds.
		Weight::from_ref_time(299_569_582 as u64)
			// Standard Error: 18_853
			.saturating_add(Weight::from_ref_time(16_304_774 as u64).saturating_mul(r as u64))
			.saturating_add(RocksDbWeight::get().reads(6 as u64))
			.saturating_add(RocksDbWeight::get().writes(3 as u64))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	// Storage: TransactionPayment NextFeeMultiplier (r:1 w:0)
	/// The range of component `r` is `[0, 20]`.
	fn seal_weight_to_fee(r: u32, ) -> Weight {
		// Minimum execution time: 295_229 nanoseconds.
		Weight::from_ref_time(305_986_569 as u64)
			// Standard Error: 33_339
			.saturating_add(Weight::from_ref_time(85_497_208 as u64).saturating_mul(r as u64))
			.saturating_add(RocksDbWeight::get().reads(7 as u64))
			.saturating_add(RocksDbWeight::get().writes(3 as u64))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_gas(r: u32, ) -> Weight {
		// Minimum execution time: 144_560 nanoseconds.
		Weight::from_ref_time(147_780_996 as u64)
			// Standard Error: 8_658
			.saturating_add(Weight::from_ref_time(8_185_717 as u64).saturating_mul(r as u64))
			.saturating_add(RocksDbWeight::get().reads(6 as u64))
			.saturating_add(RocksDbWeight::get().writes(3 as u64))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_input(r: u32, ) -> Weight {
		// Minimum execution time: 291_869 nanoseconds.
		Weight::from_ref_time(300_501_085 as u64)
			// Standard Error: 17_955
			.saturating_add(Weight::from_ref_time(13_899_691 as u64).saturating_mul(r as u64))
			.saturating_add(RocksDbWeight::get().reads(6 as u64))
			.saturating_add(RocksDbWeight::get().writes(3 as u64))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `n` is `[0, 1024]`.
	fn seal_input_per_kb(n: u32, ) -> Weight {
		// Minimum execution time: 312_247 nanoseconds.
		Weight::from_ref_time(327_623_543 as u64)
			// Standard Error: 1_162
			.saturating_add(Weight::from_ref_time(9_752_573 as u64).saturating_mul(n as u64))
			.saturating_add(RocksDbWeight::get().reads(6 as u64))
			.saturating_add(RocksDbWeight::get().writes(3 as u64))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 1]`.
	fn seal_return(r: u32, ) -> Weight {
		// Minimum execution time: 290_105 nanoseconds.
		Weight::from_ref_time(296_353_112 as u64)
			// Standard Error: 558_302
			.saturating_add(Weight::from_ref_time(1_012_487 as u64).saturating_mul(r as u64))
			.saturating_add(RocksDbWeight::get().reads(6 as u64))
			.saturating_add(RocksDbWeight::get().writes(3 as u64))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `n` is `[0, 1024]`.
	fn seal_return_per_kb(n: u32, ) -> Weight {
		// Minimum execution time: 295_097 nanoseconds.
		Weight::from_ref_time(298_173_380 as u64)
			// Standard Error: 325
			.saturating_add(Weight::from_ref_time(191_050 as u64).saturating_mul(n as u64))
			.saturating_add(RocksDbWeight::get().reads(6 as u64))
			.saturating_add(RocksDbWeight::get().writes(3 as u64))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	// Storage: Contracts DeletionQueue (r:1 w:1)
	// Storage: Contracts OwnerInfoOf (r:1 w:1)
	/// The range of component `r` is `[0, 1]`.
	fn seal_terminate(r: u32, ) -> Weight {
		// Minimum execution time: 291_339 nanoseconds.
		Weight::from_ref_time(297_328_822 as u64)
			// Standard Error: 536_109
			.saturating_add(Weight::from_ref_time(53_529_277 as u64).saturating_mul(r as u64))
			.saturating_add(RocksDbWeight::get().reads(6 as u64))
			.saturating_add(RocksDbWeight::get().reads((5 as u64).saturating_mul(r as u64)))
			.saturating_add(RocksDbWeight::get().writes(3 as u64))
			.saturating_add(RocksDbWeight::get().writes((6 as u64).saturating_mul(r as u64)))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	// Storage: RandomnessCollectiveFlip RandomMaterial (r:1 w:0)
	/// The range of component `r` is `[0, 20]`.
	fn seal_random(r: u32, ) -> Weight {
		// Minimum execution time: 292_833 nanoseconds.
		Weight::from_ref_time(303_220_868 as u64)
			// Standard Error: 46_963
			.saturating_add(Weight::from_ref_time(108_698_031 as u64).saturating_mul(r as u64))
			.saturating_add(RocksDbWeight::get().reads(7 as u64))
			.saturating_add(RocksDbWeight::get().writes(3 as u64))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_deposit_event(r: u32, ) -> Weight {
		// Minimum execution time: 293_111 nanoseconds.
		Weight::from_ref_time(304_357_752 as u64)
			// Standard Error: 84_942
			.saturating_add(Weight::from_ref_time(218_943_695 as u64).saturating_mul(r as u64))
			.saturating_add(RocksDbWeight::get().reads(6 as u64))
			.saturating_add(RocksDbWeight::get().writes(3 as u64))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `t` is `[0, 4]`.
	/// The range of component `n` is `[0, 16]`.
	fn seal_deposit_event_per_topic_and_kb(t: u32, n: u32, ) -> Weight {
		// Minimum execution time: 1_188_981 nanoseconds.
		Weight::from_ref_time(494_557_508 as u64)
			// Standard Error: 335_039
			.saturating_add(Weight::from_ref_time(176_656_427 as u64).saturating_mul(t as u64))
			// Standard Error: 92_018
			.saturating_add(Weight::from_ref_time(70_000_320 as u64).saturating_mul(n as u64))
			.saturating_add(RocksDbWeight::get().reads(6 as u64))
			.saturating_add(RocksDbWeight::get().reads((80 as u64).saturating_mul(t as u64)))
			.saturating_add(RocksDbWeight::get().writes(3 as u64))
			.saturating_add(RocksDbWeight::get().writes((80 as u64).saturating_mul(t as u64)))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_debug_message(r: u32, ) -> Weight {
		// Minimum execution time: 157_568 nanoseconds.
		Weight::from_ref_time(161_449_917 as u64)
			// Standard Error: 13_938
			.saturating_add(Weight::from_ref_time(12_897_245 as u64).saturating_mul(r as u64))
			.saturating_add(RocksDbWeight::get().reads(6 as u64))
			.saturating_add(RocksDbWeight::get().writes(3 as u64))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	/// The range of component `r` is `[0, 10]`.
	fn seal_set_storage(r: u32, ) -> Weight {
		// Minimum execution time: 294_001 nanoseconds.
		Weight::from_ref_time(248_958_000 as u64)
			// Standard Error: 472_012
			.saturating_add(Weight::from_ref_time(418_368_781 as u64).saturating_mul(r as u64))
			.saturating_add(RocksDbWeight::get().reads(6 as u64))
			.saturating_add(RocksDbWeight::get().reads((80 as u64).saturating_mul(r as u64)))
			.saturating_add(RocksDbWeight::get().writes(3 as u64))
			.saturating_add(RocksDbWeight::get().writes((80 as u64).saturating_mul(r as u64)))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	/// The range of component `n` is `[0, 8]`.
	fn seal_set_storage_per_new_kb(n: u32, ) -> Weight {
		// Minimum execution time: 433_239 nanoseconds.
		Weight::from_ref_time(588_857_373 as u64)
			// Standard Error: 1_426_031
			.saturating_add(Weight::from_ref_time(92_895_050 as u64).saturating_mul(n as u64))
			.saturating_add(RocksDbWeight::get().reads(52 as u64))
			.saturating_add(RocksDbWeight::get().reads((7 as u64).saturating_mul(n as u64)))
			.saturating_add(RocksDbWeight::get().writes(50 as u64))
			.saturating_add(RocksDbWeight::get().writes((7 as u64).saturating_mul(n as u64)))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	/// The range of component `n` is `[0, 8]`.
	fn seal_set_storage_per_old_kb(n: u32, ) -> Weight {
		// Minimum execution time: 432_591 nanoseconds.
		Weight::from_ref_time(563_499_766 as u64)
			// Standard Error: 1_212_322
			.saturating_add(Weight::from_ref_time(65_491_920 as u64).saturating_mul(n as u64))
			.saturating_add(RocksDbWeight::get().reads(51 as u64))
			.saturating_add(RocksDbWeight::get().reads((7 as u64).saturating_mul(n as u64)))
			.saturating_add(RocksDbWeight::get().writes(49 as u64))
			.saturating_add(RocksDbWeight::get().writes((7 as u64).saturating_mul(n as u64)))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	/// The range of component `r` is `[0, 10]`.
	fn seal_clear_storage(r: u32, ) -> Weight {
		// Minimum execution time: 295_678 nanoseconds.
		Weight::from_ref_time(250_903_819 as u64)
			// Standard Error: 483_469
			.saturating_add(Weight::from_ref_time(410_221_708 as u64).saturating_mul(r as u64))
			.saturating_add(RocksDbWeight::get().reads(6 as u64))
			.saturating_add(RocksDbWeight::get().reads((80 as u64).saturating_mul(r as u64)))
			.saturating_add(RocksDbWeight::get().writes(3 as u64))
			.saturating_add(RocksDbWeight::get().writes((80 as u64).saturating_mul(r as u64)))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	/// The range of component `n` is `[0, 8]`.
	fn seal_clear_storage_per_kb(n: u32, ) -> Weight {
		// Minimum execution time: 401_147 nanoseconds.
		Weight::from_ref_time(547_029_800 as u64)
			// Standard Error: 1_350_158
			.saturating_add(Weight::from_ref_time(66_946_722 as u64).saturating_mul(n as u64))
			.saturating_add(RocksDbWeight::get().reads(51 as u64))
			.saturating_add(RocksDbWeight::get().reads((7 as u64).saturating_mul(n as u64)))
			.saturating_add(RocksDbWeight::get().writes(48 as u64))
			.saturating_add(RocksDbWeight::get().writes((7 as u64).saturating_mul(n as u64)))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	/// The range of component `r` is `[0, 10]`.
	fn seal_get_storage(r: u32, ) -> Weight {
		// Minimum execution time: 296_061 nanoseconds.
		Weight::from_ref_time(257_651_770 as u64)
			// Standard Error: 444_344
			.saturating_add(Weight::from_ref_time(329_428_375 as u64).saturating_mul(r as u64))
			.saturating_add(RocksDbWeight::get().reads(6 as u64))
			.saturating_add(RocksDbWeight::get().reads((80 as u64).saturating_mul(r as u64)))
			.saturating_add(RocksDbWeight::get().writes(3 as u64))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	/// The range of component `n` is `[0, 8]`.
	fn seal_get_storage_per_kb(n: u32, ) -> Weight {
		// Minimum execution time: 377_320 nanoseconds.
		Weight::from_ref_time(506_517_859 as u64)
			// Standard Error: 1_210_985
			.saturating_add(Weight::from_ref_time(154_977_621 as u64).saturating_mul(n as u64))
			.saturating_add(RocksDbWeight::get().reads(51 as u64))
			.saturating_add(RocksDbWeight::get().reads((7 as u64).saturating_mul(n as u64)))
			.saturating_add(RocksDbWeight::get().writes(3 as u64))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	/// The range of component `r` is `[0, 10]`.
	fn seal_contains_storage(r: u32, ) -> Weight {
		// Minimum execution time: 296_753 nanoseconds.
		Weight::from_ref_time(260_829_553 as u64)
			// Standard Error: 432_834
			.saturating_add(Weight::from_ref_time(317_967_995 as u64).saturating_mul(r as u64))
			.saturating_add(RocksDbWeight::get().reads(6 as u64))
			.saturating_add(RocksDbWeight::get().reads((80 as u64).saturating_mul(r as u64)))
			.saturating_add(RocksDbWeight::get().writes(3 as u64))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	/// The range of component `n` is `[0, 8]`.
	fn seal_contains_storage_per_kb(n: u32, ) -> Weight {
		// Minimum execution time: 373_049 nanoseconds.
		Weight::from_ref_time(484_443_595 as u64)
			// Standard Error: 1_048_752
			.saturating_add(Weight::from_ref_time(64_192_391 as u64).saturating_mul(n as u64))
			.saturating_add(RocksDbWeight::get().reads(51 as u64))
			.saturating_add(RocksDbWeight::get().reads((7 as u64).saturating_mul(n as u64)))
			.saturating_add(RocksDbWeight::get().writes(3 as u64))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	/// The range of component `r` is `[0, 10]`.
	fn seal_take_storage(r: u32, ) -> Weight {
		// Minimum execution time: 297_893 nanoseconds.
		Weight::from_ref_time(256_830_685 as u64)
			// Standard Error: 436_220
			.saturating_add(Weight::from_ref_time(418_336_409 as u64).saturating_mul(r as u64))
			.saturating_add(RocksDbWeight::get().reads(6 as u64))
			.saturating_add(RocksDbWeight::get().reads((80 as u64).saturating_mul(r as u64)))
			.saturating_add(RocksDbWeight::get().writes(3 as u64))
			.saturating_add(RocksDbWeight::get().writes((80 as u64).saturating_mul(r as u64)))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	/// The range of component `n` is `[0, 8]`.
	fn seal_take_storage_per_kb(n: u32, ) -> Weight {
		// Minimum execution time: 402_327 nanoseconds.
		Weight::from_ref_time(562_732_190 as u64)
			// Standard Error: 1_453_818
			.saturating_add(Weight::from_ref_time(159_662_683 as u64).saturating_mul(n as u64))
			.saturating_add(RocksDbWeight::get().reads(51 as u64))
			.saturating_add(RocksDbWeight::get().reads((7 as u64).saturating_mul(n as u64)))
			.saturating_add(RocksDbWeight::get().writes(48 as u64))
			.saturating_add(RocksDbWeight::get().writes((7 as u64).saturating_mul(n as u64)))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_transfer(r: u32, ) -> Weight {
		// Minimum execution time: 298_014 nanoseconds.
		Weight::from_ref_time(248_052_379 as u64)
			// Standard Error: 595_597
			.saturating_add(Weight::from_ref_time(1_341_846_920 as u64).saturating_mul(r as u64))
			.saturating_add(RocksDbWeight::get().reads(7 as u64))
			.saturating_add(RocksDbWeight::get().reads((80 as u64).saturating_mul(r as u64)))
			.saturating_add(RocksDbWeight::get().writes(4 as u64))
			.saturating_add(RocksDbWeight::get().writes((80 as u64).saturating_mul(r as u64)))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_call(r: u32, ) -> Weight {
		// Minimum execution time: 298_250 nanoseconds.
		Weight::from_ref_time(299_254_000 as u64)
			// Standard Error: 8_061_285
			.saturating_add(Weight::from_ref_time(21_176_072_564 as u64).saturating_mul(r as u64))
			.saturating_add(RocksDbWeight::get().reads(7 as u64))
			.saturating_add(RocksDbWeight::get().reads((160 as u64).saturating_mul(r as u64)))
			.saturating_add(RocksDbWeight::get().writes(3 as u64))
			.saturating_add(RocksDbWeight::get().writes((160 as u64).saturating_mul(r as u64)))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_delegate_call(r: u32, ) -> Weight {
		// Minimum execution time: 300_286 nanoseconds.
		Weight::from_ref_time(505_420_101 as u64)
			// Standard Error: 12_020_807
			.saturating_add(Weight::from_ref_time(20_502_779_430 as u64).saturating_mul(r as u64))
			.saturating_add(RocksDbWeight::get().reads(6 as u64))
			.saturating_add(RocksDbWeight::get().reads((150 as u64).saturating_mul(r as u64)))
			.saturating_add(RocksDbWeight::get().writes(3 as u64))
			.saturating_add(RocksDbWeight::get().writes((75 as u64).saturating_mul(r as u64)))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:81 w:81)
	// Storage: Contracts CodeStorage (r:2 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:82 w:82)
	/// The range of component `t` is `[0, 1]`.
	/// The range of component `c` is `[0, 1024]`.
	fn seal_call_per_transfer_clone_kb(t: u32, c: u32, ) -> Weight {
		// Minimum execution time: 9_465_740 nanoseconds.
		Weight::from_ref_time(8_443_609_945 as u64)
			// Standard Error: 6_130_641
			.saturating_add(Weight::from_ref_time(1_269_904_453 as u64).saturating_mul(t as u64))
			// Standard Error: 9_192
			.saturating_add(Weight::from_ref_time(9_821_368 as u64).saturating_mul(c as u64))
			.saturating_add(RocksDbWeight::get().reads(167 as u64))
			.saturating_add(RocksDbWeight::get().reads((81 as u64).saturating_mul(t as u64)))
			.saturating_add(RocksDbWeight::get().writes(163 as u64))
			.saturating_add(RocksDbWeight::get().writes((81 as u64).saturating_mul(t as u64)))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	// Storage: Contracts Nonce (r:1 w:1)
	// Storage: Contracts OwnerInfoOf (r:80 w:80)
	/// The range of component `r` is `[0, 20]`.
	fn seal_instantiate(r: u32, ) -> Weight {
		// Minimum execution time: 293_708 nanoseconds.
		Weight::from_ref_time(294_333_000 as u64)
			// Standard Error: 19_087_339
			.saturating_add(Weight::from_ref_time(25_796_470_079 as u64).saturating_mul(r as u64))
			.saturating_add(RocksDbWeight::get().reads(8 as u64))
			.saturating_add(RocksDbWeight::get().reads((400 as u64).saturating_mul(r as u64)))
			.saturating_add(RocksDbWeight::get().writes(5 as u64))
			.saturating_add(RocksDbWeight::get().writes((400 as u64).saturating_mul(r as u64)))
	}
	// Storage: System Account (r:81 w:81)
	// Storage: Contracts ContractInfoOf (r:81 w:81)
	// Storage: Contracts CodeStorage (r:2 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Contracts Nonce (r:1 w:1)
	// Storage: Contracts OwnerInfoOf (r:1 w:1)
	// Storage: System EventTopics (r:82 w:82)
	/// The range of component `t` is `[0, 1]`.
	/// The range of component `s` is `[0, 960]`.
	fn seal_instantiate_per_transfer_salt_kb(t: u32, s: u32, ) -> Weight {
		// Minimum execution time: 11_500_978 nanoseconds.
		Weight::from_ref_time(11_033_266_932 as u64)
			// Standard Error: 48_183_801
			.saturating_add(Weight::from_ref_time(36_156_854 as u64).saturating_mul(t as u64))
			// Standard Error: 77_067
			.saturating_add(Weight::from_ref_time(122_691_370 as u64).saturating_mul(s as u64))
			.saturating_add(RocksDbWeight::get().reads(249 as u64))
			.saturating_add(RocksDbWeight::get().reads((1 as u64).saturating_mul(t as u64)))
			.saturating_add(RocksDbWeight::get().writes(247 as u64))
			.saturating_add(RocksDbWeight::get().writes((1 as u64).saturating_mul(t as u64)))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 1]`.
	fn seal_hash_sha2_256(r: u32, ) -> Weight {
		// Minimum execution time: 287_534 nanoseconds.
		Weight::from_ref_time(292_978_777 as u64)
			// Standard Error: 612_499
			.saturating_add(Weight::from_ref_time(41_539_022 as u64).saturating_mul(r as u64))
			.saturating_add(RocksDbWeight::get().reads(6 as u64))
			.saturating_add(RocksDbWeight::get().writes(3 as u64))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `n` is `[0, 1024]`.
	fn seal_hash_sha2_256_per_kb(n: u32, ) -> Weight {
		// Minimum execution time: 331_137 nanoseconds.
		Weight::from_ref_time(332_503_000 as u64)
			// Standard Error: 56_729
			.saturating_add(Weight::from_ref_time(325_461_347 as u64).saturating_mul(n as u64))
			.saturating_add(RocksDbWeight::get().reads(6 as u64))
			.saturating_add(RocksDbWeight::get().writes(3 as u64))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 1]`.
	fn seal_hash_keccak_256(r: u32, ) -> Weight {
		// Minimum execution time: 288_957 nanoseconds.
		Weight::from_ref_time(292_957_579 as u64)
			// Standard Error: 636_977
			.saturating_add(Weight::from_ref_time(60_789_720 as u64).saturating_mul(r as u64))
			.saturating_add(RocksDbWeight::get().reads(6 as u64))
			.saturating_add(RocksDbWeight::get().writes(3 as u64))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `n` is `[0, 1024]`.
	fn seal_hash_keccak_256_per_kb(n: u32, ) -> Weight {
		// Minimum execution time: 343_123 nanoseconds.
		Weight::from_ref_time(343_741_000 as u64)
			// Standard Error: 58_203
			.saturating_add(Weight::from_ref_time(247_808_004 as u64).saturating_mul(n as u64))
			.saturating_add(RocksDbWeight::get().reads(6 as u64))
			.saturating_add(RocksDbWeight::get().writes(3 as u64))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 1]`.
	fn seal_hash_blake2_256(r: u32, ) -> Weight {
		// Minimum execution time: 286_493 nanoseconds.
		Weight::from_ref_time(293_256_030 as u64)
			// Standard Error: 608_271
			.saturating_add(Weight::from_ref_time(31_193_669 as u64).saturating_mul(r as u64))
			.saturating_add(RocksDbWeight::get().reads(6 as u64))
			.saturating_add(RocksDbWeight::get().writes(3 as u64))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `n` is `[0, 1024]`.
	fn seal_hash_blake2_256_per_kb(n: u32, ) -> Weight {
		// Minimum execution time: 321_692 nanoseconds.
		Weight::from_ref_time(322_518_000 as u64)
			// Standard Error: 50_856
			.saturating_add(Weight::from_ref_time(99_851_120 as u64).saturating_mul(n as u64))
			.saturating_add(RocksDbWeight::get().reads(6 as u64))
			.saturating_add(RocksDbWeight::get().writes(3 as u64))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 1]`.
	fn seal_hash_blake2_128(r: u32, ) -> Weight {
		// Minimum execution time: 285_829 nanoseconds.
		Weight::from_ref_time(291_929_059 as u64)
			// Standard Error: 609_982
			.saturating_add(Weight::from_ref_time(30_437_840 as u64).saturating_mul(r as u64))
			.saturating_add(RocksDbWeight::get().reads(6 as u64))
			.saturating_add(RocksDbWeight::get().writes(3 as u64))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `n` is `[0, 1024]`.
	fn seal_hash_blake2_128_per_kb(n: u32, ) -> Weight {
		// Minimum execution time: 320_218 nanoseconds.
		Weight::from_ref_time(320_820_000 as u64)
			// Standard Error: 49_721
			.saturating_add(Weight::from_ref_time(99_723_926 as u64).saturating_mul(n as u64))
			.saturating_add(RocksDbWeight::get().reads(6 as u64))
			.saturating_add(RocksDbWeight::get().writes(3 as u64))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 1]`.
	fn seal_ecdsa_recover(r: u32, ) -> Weight {
		// Minimum execution time: 287_068 nanoseconds.
		Weight::from_ref_time(294_064_673 as u64)
			// Standard Error: 818_242
			.saturating_add(Weight::from_ref_time(3_038_409_926 as u64).saturating_mul(r as u64))
			.saturating_add(RocksDbWeight::get().reads(6 as u64))
			.saturating_add(RocksDbWeight::get().writes(3 as u64))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 1]`.
	fn seal_ecdsa_to_eth_address(r: u32, ) -> Weight {
		// Minimum execution time: 287_271 nanoseconds.
		Weight::from_ref_time(293_100_328 as u64)
			// Standard Error: 658_900
			.saturating_add(Weight::from_ref_time(2_070_519_571 as u64).saturating_mul(r as u64))
			.saturating_add(RocksDbWeight::get().reads(6 as u64))
			.saturating_add(RocksDbWeight::get().writes(3 as u64))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	// Storage: Contracts OwnerInfoOf (r:16 w:16)
	/// The range of component `r` is `[0, 20]`.
	fn seal_set_code_hash(r: u32, ) -> Weight {
		// Minimum execution time: 289_181 nanoseconds.
		Weight::from_ref_time(290_618_000 as u64)
			// Standard Error: 2_652_670
			.saturating_add(Weight::from_ref_time(1_362_797_408 as u64).saturating_mul(r as u64))
			.saturating_add(RocksDbWeight::get().reads(6 as u64))
			.saturating_add(RocksDbWeight::get().reads((225 as u64).saturating_mul(r as u64)))
			.saturating_add(RocksDbWeight::get().writes(3 as u64))
			.saturating_add(RocksDbWeight::get().writes((150 as u64).saturating_mul(r as u64)))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_reentrance_count(r: u32, ) -> Weight {
		// Minimum execution time: 290_954 nanoseconds.
		Weight::from_ref_time(295_190_436 as u64)
			// Standard Error: 40_295
			.saturating_add(Weight::from_ref_time(11_022_974 as u64).saturating_mul(r as u64))
			.saturating_add(RocksDbWeight::get().reads(6 as u64))
			.saturating_add(RocksDbWeight::get().writes(3 as u64))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_account_reentrance_count(r: u32, ) -> Weight {
		// Minimum execution time: 292_817 nanoseconds.
		Weight::from_ref_time(331_195_835 as u64)
			// Standard Error: 126_642
			.saturating_add(Weight::from_ref_time(25_590_472 as u64).saturating_mul(r as u64))
			.saturating_add(RocksDbWeight::get().reads(6 as u64))
			.saturating_add(RocksDbWeight::get().writes(3 as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64const(r: u32, ) -> Weight {
		// Minimum execution time: 605 nanoseconds.
		Weight::from_ref_time(866_109 as u64)
			// Standard Error: 275
			.saturating_add(Weight::from_ref_time(346_136 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64load(r: u32, ) -> Weight {
		// Minimum execution time: 718 nanoseconds.
		Weight::from_ref_time(1_402_372 as u64)
			// Standard Error: 2_693
			.saturating_add(Weight::from_ref_time(985_910 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64store(r: u32, ) -> Weight {
		// Minimum execution time: 706 nanoseconds.
		Weight::from_ref_time(1_120_197 as u64)
			// Standard Error: 394
			.saturating_add(Weight::from_ref_time(889_593 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_select(r: u32, ) -> Weight {
		// Minimum execution time: 644 nanoseconds.
		Weight::from_ref_time(1_057_422 as u64)
			// Standard Error: 857
			.saturating_add(Weight::from_ref_time(955_777 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_if(r: u32, ) -> Weight {
		// Minimum execution time: 637 nanoseconds.
		Weight::from_ref_time(629_141 as u64)
			// Standard Error: 544
			.saturating_add(Weight::from_ref_time(1_293_126 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_br(r: u32, ) -> Weight {
		// Minimum execution time: 608 nanoseconds.
		Weight::from_ref_time(1_113_576 as u64)
			// Standard Error: 880
			.saturating_add(Weight::from_ref_time(527_673 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_br_if(r: u32, ) -> Weight {
		// Minimum execution time: 624 nanoseconds.
		Weight::from_ref_time(170_717 as u64)
			// Standard Error: 1_959
			.saturating_add(Weight::from_ref_time(867_748 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_br_table(r: u32, ) -> Weight {
		// Minimum execution time: 648 nanoseconds.
		Weight::from_ref_time(539_108 as u64)
			// Standard Error: 1_490
			.saturating_add(Weight::from_ref_time(1_077_401 as u64).saturating_mul(r as u64))
	}
	/// The range of component `e` is `[1, 256]`.
	fn instr_br_table_per_entry(e: u32, ) -> Weight {
		// Minimum execution time: 2_179 nanoseconds.
		Weight::from_ref_time(2_597_080 as u64)
			// Standard Error: 74
			.saturating_add(Weight::from_ref_time(4_865 as u64).saturating_mul(e as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_call(r: u32, ) -> Weight {
		// Minimum execution time: 633 nanoseconds.
		Weight::from_ref_time(1_498_082 as u64)
			// Standard Error: 1_780
			.saturating_add(Weight::from_ref_time(2_198_342 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_call_indirect(r: u32, ) -> Weight {
		// Minimum execution time: 806 nanoseconds.
		Weight::from_ref_time(1_904_912 as u64)
			// Standard Error: 1_182
			.saturating_add(Weight::from_ref_time(2_801_959 as u64).saturating_mul(r as u64))
	}
	/// The range of component `p` is `[0, 128]`.
	fn instr_call_indirect_per_param(p: u32, ) -> Weight {
		// Minimum execution time: 4_219 nanoseconds.
		Weight::from_ref_time(5_152_036 as u64)
			// Standard Error: 290
			.saturating_add(Weight::from_ref_time(179_507 as u64).saturating_mul(p as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_local_get(r: u32, ) -> Weight {
		// Minimum execution time: 1_438 nanoseconds.
		Weight::from_ref_time(1_730_599 as u64)
			// Standard Error: 208
			.saturating_add(Weight::from_ref_time(364_842 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_local_set(r: u32, ) -> Weight {
		// Minimum execution time: 1_430 nanoseconds.
		Weight::from_ref_time(1_671_358 as u64)
			// Standard Error: 276
			.saturating_add(Weight::from_ref_time(383_715 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_local_tee(r: u32, ) -> Weight {
		// Minimum execution time: 1_394 nanoseconds.
		Weight::from_ref_time(1_708_668 as u64)
			// Standard Error: 199
			.saturating_add(Weight::from_ref_time(526_648 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_global_get(r: u32, ) -> Weight {
		// Minimum execution time: 713 nanoseconds.
		Weight::from_ref_time(1_095_871 as u64)
			// Standard Error: 343
			.saturating_add(Weight::from_ref_time(811_365 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_global_set(r: u32, ) -> Weight {
		// Minimum execution time: 727 nanoseconds.
		Weight::from_ref_time(1_056_556 as u64)
			// Standard Error: 355
			.saturating_add(Weight::from_ref_time(830_505 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_memory_current(r: u32, ) -> Weight {
		// Minimum execution time: 753 nanoseconds.
		Weight::from_ref_time(1_004_624 as u64)
			// Standard Error: 259
			.saturating_add(Weight::from_ref_time(693_886 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 1]`.
	fn instr_memory_grow(r: u32, ) -> Weight {
		// Minimum execution time: 649 nanoseconds.
		Weight::from_ref_time(742_979 as u64)
			// Standard Error: 5_852
			.saturating_add(Weight::from_ref_time(184_932_720 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64clz(r: u32, ) -> Weight {
		// Minimum execution time: 615 nanoseconds.
		Weight::from_ref_time(919_735 as u64)
			// Standard Error: 443
			.saturating_add(Weight::from_ref_time(509_234 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64ctz(r: u32, ) -> Weight {
		// Minimum execution time: 623 nanoseconds.
		Weight::from_ref_time(883_408 as u64)
			// Standard Error: 437
			.saturating_add(Weight::from_ref_time(517_270 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64popcnt(r: u32, ) -> Weight {
		// Minimum execution time: 613 nanoseconds.
		Weight::from_ref_time(819_503 as u64)
			// Standard Error: 704
			.saturating_add(Weight::from_ref_time(518_031 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64eqz(r: u32, ) -> Weight {
		// Minimum execution time: 647 nanoseconds.
		Weight::from_ref_time(922_130 as u64)
			// Standard Error: 384
			.saturating_add(Weight::from_ref_time(525_187 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64extendsi32(r: u32, ) -> Weight {
		// Minimum execution time: 592 nanoseconds.
		Weight::from_ref_time(930_340 as u64)
			// Standard Error: 277
			.saturating_add(Weight::from_ref_time(505_104 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64extendui32(r: u32, ) -> Weight {
		// Minimum execution time: 661 nanoseconds.
		Weight::from_ref_time(942_938 as u64)
			// Standard Error: 268
			.saturating_add(Weight::from_ref_time(504_997 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i32wrapi64(r: u32, ) -> Weight {
		// Minimum execution time: 613 nanoseconds.
		Weight::from_ref_time(864_875 as u64)
			// Standard Error: 720
			.saturating_add(Weight::from_ref_time(508_015 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64eq(r: u32, ) -> Weight {
		// Minimum execution time: 609 nanoseconds.
		Weight::from_ref_time(964_975 as u64)
			// Standard Error: 508
			.saturating_add(Weight::from_ref_time(732_494 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64ne(r: u32, ) -> Weight {
		// Minimum execution time: 608 nanoseconds.
		Weight::from_ref_time(991_551 as u64)
			// Standard Error: 1_126
			.saturating_add(Weight::from_ref_time(731_593 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64lts(r: u32, ) -> Weight {
		// Minimum execution time: 608 nanoseconds.
		Weight::from_ref_time(938_821 as u64)
			// Standard Error: 535
			.saturating_add(Weight::from_ref_time(741_527 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64ltu(r: u32, ) -> Weight {
		// Minimum execution time: 634 nanoseconds.
		Weight::from_ref_time(969_389 as u64)
			// Standard Error: 421
			.saturating_add(Weight::from_ref_time(743_647 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64gts(r: u32, ) -> Weight {
		// Minimum execution time: 620 nanoseconds.
		Weight::from_ref_time(997_361 as u64)
			// Standard Error: 540
			.saturating_add(Weight::from_ref_time(748_108 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64gtu(r: u32, ) -> Weight {
		// Minimum execution time: 586 nanoseconds.
		Weight::from_ref_time(966_929 as u64)
			// Standard Error: 524
			.saturating_add(Weight::from_ref_time(760_077 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64les(r: u32, ) -> Weight {
		// Minimum execution time: 623 nanoseconds.
		Weight::from_ref_time(974_811 as u64)
			// Standard Error: 528
			.saturating_add(Weight::from_ref_time(745_124 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64leu(r: u32, ) -> Weight {
		// Minimum execution time: 608 nanoseconds.
		Weight::from_ref_time(990_326 as u64)
			// Standard Error: 535
			.saturating_add(Weight::from_ref_time(808_599 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64ges(r: u32, ) -> Weight {
		// Minimum execution time: 600 nanoseconds.
		Weight::from_ref_time(969_957 as u64)
			// Standard Error: 604
			.saturating_add(Weight::from_ref_time(744_174 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64geu(r: u32, ) -> Weight {
		// Minimum execution time: 632 nanoseconds.
		Weight::from_ref_time(976_250 as u64)
			// Standard Error: 938
			.saturating_add(Weight::from_ref_time(798_224 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64add(r: u32, ) -> Weight {
		// Minimum execution time: 627 nanoseconds.
		Weight::from_ref_time(939_131 as u64)
			// Standard Error: 457
			.saturating_add(Weight::from_ref_time(718_514 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64sub(r: u32, ) -> Weight {
		// Minimum execution time: 621 nanoseconds.
		Weight::from_ref_time(905_432 as u64)
			// Standard Error: 637
			.saturating_add(Weight::from_ref_time(716_365 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64mul(r: u32, ) -> Weight {
		// Minimum execution time: 610 nanoseconds.
		Weight::from_ref_time(926_074 as u64)
			// Standard Error: 457
			.saturating_add(Weight::from_ref_time(716_003 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64divs(r: u32, ) -> Weight {
		// Minimum execution time: 595 nanoseconds.
		Weight::from_ref_time(1_023_054 as u64)
			// Standard Error: 2_584
			.saturating_add(Weight::from_ref_time(1_349_736 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64divu(r: u32, ) -> Weight {
		// Minimum execution time: 608 nanoseconds.
		Weight::from_ref_time(966_937 as u64)
			// Standard Error: 786
			.saturating_add(Weight::from_ref_time(1_284_291 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64rems(r: u32, ) -> Weight {
		// Minimum execution time: 628 nanoseconds.
		Weight::from_ref_time(972_082 as u64)
			// Standard Error: 1_441
			.saturating_add(Weight::from_ref_time(1_403_148 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64remu(r: u32, ) -> Weight {
		// Minimum execution time: 644 nanoseconds.
		Weight::from_ref_time(991_706 as u64)
			// Standard Error: 1_103
			.saturating_add(Weight::from_ref_time(1_284_545 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64and(r: u32, ) -> Weight {
		// Minimum execution time: 630 nanoseconds.
		Weight::from_ref_time(941_587 as u64)
			// Standard Error: 506
			.saturating_add(Weight::from_ref_time(719_943 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64or(r: u32, ) -> Weight {
		// Minimum execution time: 624 nanoseconds.
		Weight::from_ref_time(939_991 as u64)
			// Standard Error: 520
			.saturating_add(Weight::from_ref_time(719_994 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64xor(r: u32, ) -> Weight {
		// Minimum execution time: 609 nanoseconds.
		Weight::from_ref_time(970_308 as u64)
			// Standard Error: 552
			.saturating_add(Weight::from_ref_time(719_566 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64shl(r: u32, ) -> Weight {
		// Minimum execution time: 613 nanoseconds.
		Weight::from_ref_time(920_835 as u64)
			// Standard Error: 623
			.saturating_add(Weight::from_ref_time(737_690 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64shrs(r: u32, ) -> Weight {
		// Minimum execution time: 626 nanoseconds.
		Weight::from_ref_time(919_030 as u64)
			// Standard Error: 486
			.saturating_add(Weight::from_ref_time(737_096 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64shru(r: u32, ) -> Weight {
		// Minimum execution time: 634 nanoseconds.
		Weight::from_ref_time(964_779 as u64)
			// Standard Error: 496
			.saturating_add(Weight::from_ref_time(736_322 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64rotl(r: u32, ) -> Weight {
		// Minimum execution time: 631 nanoseconds.
		Weight::from_ref_time(918_768 as u64)
			// Standard Error: 952
			.saturating_add(Weight::from_ref_time(740_280 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64rotr(r: u32, ) -> Weight {
		// Minimum execution time: 639 nanoseconds.
		Weight::from_ref_time(955_994 as u64)
			// Standard Error: 523
			.saturating_add(Weight::from_ref_time(738_232 as u64).saturating_mul(r as u64))
	}
}
